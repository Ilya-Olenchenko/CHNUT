/* Generated by Together */

package net.soft_systems.crypto.beans.policy;
import java.awt.event.*;
import java.beans.PropertyVetoException;
import java.util.*;
import javax.swing.*;
import net.soft_systems.crypto.Run;
import net.soft_systems.crypto.base.CryptoBean;
import net.soft_systems.crypto.frames.policy.CommandFrame;
import net.soft_systems.integrator.*;
import net.soft_systems.model.server.ModelServerImpl;
import org.w3c.dom.Element;
public class CommandBean extends CryptoBean implements DynamicBean {
	private Vector conditions = new Vector();
	private Vector operations = new Vector();
	public CommandBean() { super(); }
	public void store(Element beanElement, BeanConfig config) {
		BeanUtil.defaultStore(this, beanElement, config);
		Element conditionsElement = config.addElement(beanElement, "conditions");
		config.storeBeansToXML(conditions, conditionsElement);
		Element operationsElement = config.addElement(beanElement, "operations");
		config.storeBeansToXML(operations, operationsElement);
	}
	public String getBaseName() { return "c"; }
	protected void exec() {
		try {
			if (ModelServerImpl.SERVER != null) {
				if (ModelServerImpl.SERVER.execCommand(getId()))
					{ Debug.notice("Команда " + getId() + " выполнена"); }
				else Debug.notice("Условие команды ложное. Команда " + getId() + " не выполнена");
			}
			return;
		}
		catch (Exception ex) { Debug.error("Ошибка при выполнении команды " + ex.getMessage()); }
	}
	public void initMenu(JPopupMenu menu) {
		JMenuItem menuItem = new JMenuItem(Run.integrator.messages.getMessage("properties"));
		menuItem.setMnemonic(KeyEvent.VK_ENTER);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.integrator.addFrameToDesktop(getEditFrame()); }
			});
		menu.add(menuItem);
		menuItem = new JMenuItem("Выполнить");
		menuItem.setMnemonic(KeyEvent.VK_E);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { exec(); }
			});
		menu.add(menuItem);
	}
	public void closeEditFrame() {
		if (editFrame != null) {
			try { editFrame.setClosed(true); }
			catch (PropertyVetoException ex) { Debug.warning("PropertyVetoException :" + ex.getMessage()); }
			editFrame = null;
		}
	}
	public EditFrame getEditFrame() {
		if (editFrame == null) { editFrame = new CommandFrame(this); }
		return editFrame;
	}
	public String getTypeName() { return "Команда"; }
	public void load(Element beanElement, BeanConfig config) {
		BeanUtil.defaultLoad(this, beanElement, config);
		Element conditionsElement = config.getChildElementByTag(beanElement, "conditions");
		config.readBeansFromXML(conditions, conditionsElement);
		Element operationsElement = config.getChildElementByTag(beanElement, "operations");
		config.readBeansFromXML(operations, operationsElement);
	}
	public Vector getConditions() { return conditions; }
	public Vector getOperations() { return operations; }
	public String getCommandString() {
		String command = "command " + getId() + " ";
		if (!conditions.isEmpty()) {
			command += "if ";
			Enumeration en = conditions.elements();
			ConditionBean obj;
			while (en.hasMoreElements()) {
				obj = (ConditionBean)en.nextElement();
				command += obj.getId();
				if (en.hasMoreElements()) { command += " and "; }
			}
			command += " then ";
		}
		if (!operations.isEmpty()) {
			Enumeration en = operations.elements();
			OperationBean obj;
			while (en.hasMoreElements()) {
				obj = (OperationBean)en.nextElement();
				command += obj.getOperation();
				if (en.hasMoreElements()) { command += ", "; }
			}
		}
		return command;
	}
	public String getCommandHtml() {
		String command = "<b>command</b> <i>" + getId() + "</i><br>";
		if (!conditions.isEmpty()) {
			command += "&nbsp;&nbsp;<b>if</b> ";
			Enumeration en = conditions.elements();
			ConditionBean obj;
			while (en.hasMoreElements()) {
				obj = (ConditionBean)en.nextElement();
				command += "<i>" + obj.getId() + "</i>";
				if (en.hasMoreElements()) { command += " <b>and</b> "; }
			}
			command += " <b>then</b> <br>";
		}
		if (!operations.isEmpty()) {
			command += "&nbsp;&nbsp;&nbsp;&nbsp;";
			Enumeration en = operations.elements();
			OperationBean obj;
			while (en.hasMoreElements()) {
				obj = (OperationBean)en.nextElement();
				command += "<i>" + obj.getOperation() + "</i>";
				if (en.hasMoreElements()) { command += "<b>,</b> "; }
			}
			command += "<br>";
		}
		command += "&nbsp;&nbsp;<b>end</b> ";
		return command;
	}
	public void validateElements(Vector subjects, Vector resources) {
		Enumeration en = conditions.elements();
		Vector toRemove = new Vector();
		ConditionBean obj;
		while (en.hasMoreElements()) {
			obj = (ConditionBean)en.nextElement();
			if (!obj.isValidSubject(subjects) || !obj.isValidObject(subjects, resources)) { toRemove.add(obj); }
		}
		en = toRemove.elements();
		while (en.hasMoreElements()) { conditions.remove(en.nextElement()); }
		toRemove.clear();
		en = operations.elements();
		OperationBean oobj;
		while (en.hasMoreElements()) {
			oobj = (OperationBean)en.nextElement();
			if (!oobj.isValidSubject(subjects) || !oobj.isValidObject(subjects, resources)) { toRemove.add(oobj); }
		}
		en = toRemove.elements();
		while (en.hasMoreElements()) { operations.remove(en.nextElement()); }
	}
	public void validateRights(Vector availRights) {
		Enumeration en = conditions.elements();
		ConditionBean obj;
		Vector toRemove = new Vector();
		while (en.hasMoreElements()) {
			obj = (ConditionBean)en.nextElement();
			if (!obj.isValidRight(availRights)) { toRemove.add(obj); }
		}
		en = toRemove.elements();
		while (en.hasMoreElements()) { conditions.remove(en.nextElement()); }
		toRemove.clear();
		en = operations.elements();
		OperationBean oobj;
		while (en.hasMoreElements()) {
			oobj = (OperationBean)en.nextElement();
			if (!oobj.isValidRight(availRights)) { toRemove.add(oobj); }
		}
		en = toRemove.elements();
		while (en.hasMoreElements()) { operations.remove(en.nextElement()); }
	}
}

