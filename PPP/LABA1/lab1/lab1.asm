;***** Програма до лабораторної роботи №1 (стенд EV8031 / AVR) *****
;*** Працюємо з лінійкою світлодіодів ***

;підключення файлу, що містить опис регістрів і адрес для ATmega8515
.include "m8515def.inc"

;*** Призначення символічних імен регістрів ***

.def temp = r16 ;регістр тимчасового зберігання
.def long_delay_low = r24 ;молодший байт лічильника довгої затримки
.def long_delay_high = r25 ;старший байт лічильника довгої затримки
.def counter = r17; лічильник циклу в підпрограмі генерації затримки

;*** Призначення констант ***

;адреса регістра зовнішньої пам'яті, що відповідає за роботу лінійки світлодіодів
.EQU led_line = 0xA006

;визначаємо маски для запалювання світлодіодів
;запис одиниці у вказаний біт регістра викликає запалювання обраного світлодіода
.EQU t1 = 0b00011000
.EQU t2 = 0b00100100
.EQU t3 = 0b01000010
.EQU t4 = 0b10000001
.EQU t5 = 0b01000010
.EQU t6 = 0b00100100
.EQU t7 = 0b00011000
.EQU t8 = 0b11111111
.EQU t9 = 0b00011000
.EQU t10 = 0b00100100
.EQU t11 = 0b01000010
.EQU t12 = 0b10000001
.EQU t13 = 0b01000010
.EQU t14 = 0b00100100
.EQU t15 = 0b00011000

;***** Початок програми *****

.CSEG		;визначаємо початок сегмента коду		
.ORG 0x0000	;визначаємо адресу початку сегменту коду в пам'яті програм	

;*** Ініціалізація таблиці векторів переривань мікроконтролера ***

	rjmp Init; вектор переривання по скиданню
	reti; rjmp EXT_INT0; IRQ0 Handler
	reti; rjmp EXT_INT1; IRQ1 Handler
	reti; rjmp TIM1_CAPT; Timer1 Capture Handler
	reti; rjmp TIM1_COMPA; Timer1 Compare A Handler
	reti; rjmp TIM1_COMPB; Timer1 Compare B Handler
	reti; rjmp TIM1_OVF; Timer1 Overflow Handler
	reti; rjmp TIM0_OVF; Timer0 Overflow Handler
	reti; rjmp SPI_STC; SPI Transfer Complete Handler
	reti; rjmp USART_RXC; USART RX Complete Handler
	reti; rjmp USART_UDRE; UDR0 Empty Handler
	reti; rjmp USART_TXC; USART TX Complete Handler
	reti; rjmp ANA_COMP; Analog Comparator Handler
	reti; rjmp EXT_INT2; IRQ2 Handler
	reti; rjmp TIM0_COMP; Timer0 Compare Handler
	reti; rjmp EE_RDY; EEPROM Ready Handler
	reti; rjmp SPM_RDY; Store Program memory Ready

;*** Початкова ініціалізація мікроконтролера ***

Init:

	ldi temp, low (RAMEND)	;ініціалізація вказівника стеку SP
	out SPL, temp
	ldi temp, high (RAMEND)
	out SPH, temp		;установка SP на останній адреса SRAM
	sbi ACSR, 7			;відключення живлення аналогового компаратора

;дозволяємо роботу із зовнішньою пам'яттю (звернення до системного контролеру)
	ldi temp, 0b10000000
	out MCUCR, temp

;*** Робота із напівпровідниковим світлодіодним індикатором
;встановлюємо вказівник Z на адресу лінійки світлодіодів
	ldi ZL, low (led_line)
	ldi ZH, high (led_line)

Infinite_loop:		;нескінченний цикл

	ldi temp, t1	;задаємо маску запалювання світлодіодів (2 діоди горять)
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t2	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t3	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t4	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди
	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t5	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t6	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t7	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди
	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t8	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t9	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t10	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t11	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t12	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди
	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t13	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 225 с

	ldi temp, t14	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

	ldi temp, t15	;задаємо маску запалювання світлодіодів 
	st Z, temp		;видаємо маску на світлодіоди

	rcall long_delay; викликаємо затримку приблизно на 2.25 с

rjmp Infinite_loop	;перехід на мітку нескінченного циклу

;*** Підпрограма довгої затримки ***

long_delay:
;* Якщо в регістрову пару завантажити число 9216 (2400h), то затримка буде близько 1 секунди

;* Приблизна формула розрахунку коефіцієнта при кварці у 7.3728 МГц така:
;* 800 * коефіцієнт затримки / (7.3728 * 1 000 000) = необхідний час в [с]

	ldi long_delay_low, 0x00;завантаження в пару регістрів коефіцієнта затримки 
	ldi long_delay_high, 0x51 ;(5100h)

long_loop:	;тіло циклу займає 796 + 2 + 2 = 800 тактів
	rcall short_delay		;коротка затримка		
	sbiw long_delay_high: long_delay_low, 0b00000001	;віднімання з пари числа 1 (декремент довгого лічильника)
	brne long_loop	;якщо не 0, повторити цикл
	ret			;повернення в основну програму

;*** Підпрограма короткої затримки (потрібна для генерації довгих затримок) ***
short_delay:; вся підпрограма займає рівно 796 тактів разом із rcall та ret

	nop
	ldi counter, 0xC5	;лічильник циклу
short_loop:
	nop
	dec counter
	brne short_loop	;команда розгалуження по прапорцю нуля (зациклення)

	ret			;повернення до основної програми

.EXIT				;кінець програми	
