/* Generated by Together */

package net.soft_systems.crypto.frames.policy;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import javax.swing.*;
import javax.swing.event.ListDataListener;
import net.soft_systems.crypto.Run;
import net.soft_systems.crypto.base.CryptoBean;
import net.soft_systems.crypto.beans.policy.*;
import net.soft_systems.crypto.frames.CryptoEditFrame;
import net.soft_systems.integrator.*;
public class CommandFrame extends CryptoEditFrame {
	private JScrollPane infoScrollPane;
	private JEditorPane infoLabel;
	private JPanel operationParamsPanel;
	private JPanel operationPanel;
	private JComboBox operationTypeComboBox;
	private JList operationList;
	private JComboBox operationSubjectComboBox;
	private JComboBox operationObjectComboBox;
	private JComboBox operationRightComboBox;
	public CommandFrame(CryptoBean bean) { super(bean); }
	protected void initRightsOperationPanel() {
		JPanel panel = operationParamsPanel;
		panel.removeAll();
		GridBagLayout layout = new GridBagLayout();
		panel.setLayout(layout);
		// right
		panel.add(new JLabel("Право"),
			new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationRightComboBox = getRightsComboBox();
		panel.add(operationRightComboBox,
			new GridBagConstraints(1, 0, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		// subject
		panel.add(new JLabel("Субъект"),
			new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationSubjectComboBox = getSubjectsComboBox();
		panel.add(operationSubjectComboBox,
			new GridBagConstraints(1, 1, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		// object
		panel.add(new JLabel("Объект"),
			new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationObjectComboBox = getObjectsComboBox();
		panel.add(operationObjectComboBox,
			new GridBagConstraints(1, 2, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
	}
	protected void initSubjectOperationPanel() {
		JPanel panel = operationParamsPanel;
		panel.removeAll();
		GridBagLayout layout = new GridBagLayout();
		panel.setLayout(layout);
		// subject
		panel.add(new JLabel("Субъект"),
			new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationSubjectComboBox = getSubjectsComboBox();
		panel.add(operationSubjectComboBox,
			new GridBagConstraints(1, 0, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
	}
	protected void initObjectOperationPanel() {
		JPanel panel = operationParamsPanel;
		panel.removeAll();
		GridBagLayout layout = new GridBagLayout();
		panel.setLayout(layout);
		// object
		panel.add(new JLabel("Объект"),
			new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationObjectComboBox = getObjectsComboBox();
		panel.add(operationObjectComboBox,
			new GridBagConstraints(1, 0, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
	}
	protected void updateOperationParamPanel() {
		int selectedIndex = operationTypeComboBox.getSelectedIndex();
		switch (selectedIndex) {
			case 0:
			case 1:
				Debug.debug("Selected operation subject");
				initSubjectOperationPanel();
			break;
			case 2:
			case 3:
				Debug.debug("Selected operation object");
				initObjectOperationPanel();
			break;
			case 4:
			case 5:
				Debug.debug("Selected operation right");
				initRightsOperationPanel();
			break;
		}
		updateInfo();
		operationPanel.validate();
		operationParamsPanel.validate();
		operationParamsPanel.getParent().validate();
	}
	protected JComboBox getOperationTypeComboBox() {
		JComboBox combo = new JComboBox();
		combo.addItem("create subject S");
		combo.addItem("destroy subject S");
		combo.addItem("create object O");
		combo.addItem("destroy object O");
		combo.addItem("enter R into M[S,O]");
		combo.addItem("delete R into M[S,O]");
		combo.addItemListener(
			new ItemListener() {
				public void itemStateChanged(ItemEvent e) { updateOperationParamPanel(); }
			});
		return combo;
	}
	protected void addCurrentOperation() {
		int selectedIndex = operationTypeComboBox.getSelectedIndex();
		switch (selectedIndex) {
			case 0:
				if (operationSubjectComboBox.getSelectedItem() != null) {
					Bean subject              = (Bean)operationSubjectComboBox.getSelectedItem();
					CreateSubjectOperation op = new CreateSubjectOperation(subject);
					CommandBean commandBean   = (CommandBean)getBean();
					commandBean.getOperations().add(op);
					Debug.debug("Adding operation " + op);
					updateOperationList();
					operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
			case 1:
				if (operationSubjectComboBox.getSelectedItem() != null) {
					Bean subject               = (Bean)operationSubjectComboBox.getSelectedItem();
					DestroySubjectOperation op = new DestroySubjectOperation(subject);
					CommandBean commandBean    = (CommandBean)getBean();
					commandBean.getOperations().add(op);
					Debug.debug("Adding operation " + op);
					updateOperationList();
					operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
			case 2:
				if (operationObjectComboBox.getSelectedItem() != null) {
					Bean object              = (Bean)operationObjectComboBox.getSelectedItem();
					CreateObjectOperation op = new CreateObjectOperation(object);
					CommandBean commandBean  = (CommandBean)getBean();
					commandBean.getOperations().add(op);
					Debug.debug("Adding operation " + op);
					updateOperationList();
					operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
			case 3:
				if (operationObjectComboBox.getSelectedItem() != null) {
					Bean object               = (Bean)operationObjectComboBox.getSelectedItem();
					DestroyObjectOperation op = new DestroyObjectOperation(object);
					CommandBean commandBean   = (CommandBean)getBean();
					commandBean.getOperations().add(op);
					Debug.debug("Adding operation " + op);
					updateOperationList();
					operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
			case 4:
				if ((operationObjectComboBox.getSelectedItem() != null) &&
					(operationSubjectComboBox.getSelectedItem() != null) &&
					(operationRightComboBox.getSelectedItem() != null)) {
						Bean object             = (Bean)operationObjectComboBox.getSelectedItem();
						Bean subject            = (Bean)operationSubjectComboBox.getSelectedItem();
						RightBean right         = (RightBean)operationRightComboBox.getSelectedItem();
						EnterRightOperation op  = new EnterRightOperation(right, subject, object);
						CommandBean commandBean = (CommandBean)getBean();
						commandBean.getOperations().add(op);
						Debug.debug("Adding operation " + op);
						updateOperationList();
						operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
			case 5:
				if ((operationObjectComboBox.getSelectedItem() != null) &&
					(operationSubjectComboBox.getSelectedItem() != null) &&
					(operationRightComboBox.getSelectedItem() != null)) {
						Bean object             = (Bean)operationObjectComboBox.getSelectedItem();
						Bean subject            = (Bean)operationSubjectComboBox.getSelectedItem();
						RightBean right         = (RightBean)operationRightComboBox.getSelectedItem();
						DeleteRightOperation op = new DeleteRightOperation(right, subject, object);
						CommandBean commandBean = (CommandBean)getBean();
						commandBean.getOperations().add(op);
						Debug.debug("Adding operation " + op);
						updateOperationList();
						operationList.setSelectedIndex(operationList.getModel().getSize() - 1);
				}
			break;
		}
	}
	protected void delCurrentOperation() {
		if (operationList.getSelectedValue() != null) {
			CommandBean commandBean = (CommandBean)getBean();
			int selIndex = operationList.getSelectedIndex();
			commandBean.getOperations().remove(operationList.getSelectedValue());
			updateOperationList();
			if (selIndex < operationList.getModel().getSize()) { operationList.setSelectedIndex(selIndex); }
			else if (selIndex > 0) { operationList.setSelectedIndex(selIndex - 1); }
		}
	}
	protected JButton getDelOperationButton() {
		JButton b = new JButton("Удалить");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { delCurrentOperation(); }
			});
		return b;
	}
	protected void moveUpCurrentOperation() {
		if ((operationList.getSelectedValue() != null) && (operationList.getSelectedIndex() > 0)) {
			CommandBean commandBean = (CommandBean)getBean();
			Object cur              = operationList.getSelectedValue();
			int curIndex            = commandBean.getOperations().indexOf(cur);
			commandBean.getOperations().remove(curIndex);
			commandBean.getOperations().insertElementAt(cur, curIndex - 1);
			operationList.setSelectedIndex(curIndex - 1);
			updateOperationList();
			operationList.setSelectedIndex(curIndex - 1);
		}
	}
	protected void moveDownCurrentOperation() {
		if ((operationList.getSelectedValue() != null) &&
			(operationList.getSelectedIndex() < operationList.getModel().getSize() - 1)) {
				CommandBean commandBean = (CommandBean)getBean();
				Object cur              = operationList.getSelectedValue();
				int curIndex            = commandBean.getOperations().indexOf(cur);
				commandBean.getOperations().remove(curIndex);
				if (curIndex < operationList.getModel().getSize() - 1) {
					commandBean.getOperations().insertElementAt(cur, curIndex + 1);
				}
				else { commandBean.getOperations().add(cur); }
				updateOperationList();
				operationList.setSelectedIndex(curIndex + 1);
		}
	}
	protected JButton getUpOperationButton() {
		JButton b = new JButton("Вверх");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { moveUpCurrentOperation(); }
			});
		return b;
	}
	protected JButton getDownOperationButton() {
		JButton b = new JButton("Вниз");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { moveDownCurrentOperation(); }
			});
		return b;
	}
	protected JButton getAddOperationButton() {
		JButton b = new JButton("Добавить");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { addCurrentOperation(); }
			});
		return b;
	}
	private class UpdatableListModel extends AbstractListModel {
		private Vector list;
		public UpdatableListModel(Vector list) { this.list = list; }
		public int getSize() { return list.size(); }
		public Object getElementAt(int i) { return list.elementAt(i); }
	}
	protected JList initOperationList() {
		CommandBean commandBean  = (CommandBean)getBean();
		UpdatableListModel model = new UpdatableListModel(commandBean.getOperations());
		JList list               = new JList();
		list.setMinimumSize(new Dimension(150, 100));
		list.setPreferredSize(new Dimension(150, 100));
		list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setModel(model);
		return list;
	}
	protected void updateOperationList() {
		updateInfo();
		CommandBean commandBean = (CommandBean)getBean();
		operationList.setModel(new UpdatableListModel(commandBean.getOperations()));
		operationList.validate();
	}
	protected JPanel initOperationPanel() {
		JPanel panel = new JPanel();
		setBackground(panel.getBackground());
		panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Операции"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		GridBagLayout layout = new GridBagLayout();
		panel.setLayout(layout);
		// operations
		operationList = initOperationList();
		JScrollPane scrollPane = new JScrollPane(operationList);
		panel.add(scrollPane,
			new GridBagConstraints(0, 0, GridBagConstraints.RELATIVE, 3, 100, 0, GridBagConstraints.NORTH, GridBagConstraints.BOTH,
			new Insets(5, 5, 5, 5), 0, 0));
		panel.add(getUpOperationButton(),
			new GridBagConstraints(3, 0, GridBagConstraints.REMAINDER, 1, 0, 0.0, GridBagConstraints.NORTHWEST,
			GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));
		panel.add(getDownOperationButton(),
			new GridBagConstraints(3, 1, GridBagConstraints.REMAINDER, 1, 0, 0.0, GridBagConstraints.NORTHWEST,
			GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));
		panel.add(getDelOperationButton(),
			new GridBagConstraints(3, 2, GridBagConstraints.REMAINDER, 1, 0, 0.0, GridBagConstraints.NORTHWEST,
			GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));
		// type
		panel.add(new JLabel("Тип"),
			new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		operationTypeComboBox = getOperationTypeComboBox();
		panel.add(operationTypeComboBox,
			new GridBagConstraints(1, 3, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		operationParamsPanel = new JPanel();
		panel.add(operationParamsPanel,
			new GridBagConstraints(0, 4, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
		// add
		panel.add(getAddOperationButton(),
			new GridBagConstraints(0, 5, GridBagConstraints.REMAINDER, 1, 1.0, 0.0, GridBagConstraints.NORTHEAST,
			GridBagConstraints.NONE, new Insets(0, 0, 5, 5), 0, 0));
		panel.add(new JPanel(),
			new GridBagConstraints(0, 6, GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, 1.0, 100.0,
			GridBagConstraints.NORTHEAST, GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));
		return panel;
	}
	protected void updateInfo() {
		infoLabel.setVisible(false);
		CommandBean commandBean = (CommandBean)getBean();
		infoLabel.setText(commandBean.getCommandHtml());
		infoLabel.moveCaretPosition(0);
		infoLabel.setVisible(true);
	}
	protected JPanel initInfoPanel() {
		JPanel panel = new JPanel();
		panel.setLayout(new GridLayout(1, 1));
		CommandBean commandBean = (CommandBean)getBean();
		infoLabel = new JEditorPane("text/html", "");
		infoLabel.setEditable(false);
		infoLabel.setBackground(getBackground());
		infoScrollPane = new JScrollPane(infoLabel);
		infoScrollPane.setMinimumSize(new Dimension(300, 80));
		infoScrollPane.setPreferredSize(new Dimension(300, 80));
		panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Команда"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		panel.add(infoScrollPane);
		return panel;
	}
	protected JComboBox getRightsComboBox() {
		JComboBox cb = new JComboBox(Run.infoSystem.getRights());
		return cb;
	}
	protected JComboBox getSubjectsComboBox() {
		JComboBox cb = new JComboBox(Run.infoSystem.getSubjects());
		return cb;
	}
	protected JComboBox getObjectsComboBox() {
		JComboBox cb = new JComboBox(Run.infoSystem.getObjects());
		return cb;
	}
	protected JComboBox getConditionsComboBox() {
		CommandBean bean = (CommandBean)getBean();
		JComboBox cb = new JComboBox();
		cb.setModel(new UpdatableComboBoxModel(bean.getConditions()));
		return cb;
	}
	protected void updateConditionsComboBox() {
		CommandBean bean = (CommandBean)getBean();
		conditionsComboBox.setModel(new UpdatableComboBoxModel(bean.getConditions()));
		updateInfo();
	}
	public JButton getConditionDelButton() {
		JButton b = new JButton("Удалить");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if (conditionsComboBox.getSelectedItem() != null) {
						Object condition = conditionsComboBox.getSelectedItem();
						Debug.debug("Deleting condition " + condition.toString());
						CommandBean bean = (CommandBean)getBean();
						bean.getConditions().remove(condition);
						updateConditionsComboBox();
					}
				}
			});
		return b;
	}
	private class UpdatableComboBoxModel implements ComboBoxModel {
		private Vector items;
		private Object selected;
		public UpdatableComboBoxModel(Vector items) {
			this.items = items;
			if (items.size() > 0) { selected = items.elementAt(0); }
		}
		public void setSelectedItem(Object obj) { this.selected = obj; }
		public Object getSelectedItem() { return selected; }
		public int getSize() { return items.size(); }
		public Object getElementAt(int i) { return items.elementAt(i); }
		public void addListDataListener(ListDataListener dataListener) { }
		public void removeListDataListener(ListDataListener dataListener) { }
	}
	public JButton getConditionAddButton() {
		JButton b = new JButton("Добавить");
		b.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if (conditionRightsComboBox.getSelectedItem() != null &&
						conditionObjectsComboBox.getSelectedItem() != null &&
						conditionSubjectsComboBox.getSelectedItem() != null) {
							ConditionBean condition = new ConditionBean((RightBean)conditionRightsComboBox.getSelectedItem(),
								(Bean)conditionSubjectsComboBox.getSelectedItem(),
								(Bean)conditionObjectsComboBox.getSelectedItem());
							Debug.debug("Adding condition " + condition.getId());
							CommandBean bean = (CommandBean)getBean();
							bean.getConditions().add(condition);
							updateConditionsComboBox();
							conditionsComboBox.setSelectedItem(condition);
					}
				}
			});
		return b;
	}
	private JComboBox conditionsComboBox;
	private JComboBox conditionObjectsComboBox;
	private JComboBox conditionSubjectsComboBox;
	private JComboBox conditionRightsComboBox;
	protected JPanel initConditionPanel() {
		JPanel panel = new JPanel();
		setBackground(panel.getBackground());
		panel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Условие выполнения"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		GridBagLayout layout = new GridBagLayout();
		panel.setLayout(layout);
		// conditions
		conditionsComboBox = getConditionsComboBox();
		panel.add(conditionsComboBox,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE,
			GridBagConstraints.RELATIVE, 1, 100, 0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));
		panel.add(getConditionDelButton(),
			new GridBagConstraints(3, 0, GridBagConstraints.REMAINDER, 1, 0, 0.0, GridBagConstraints.NORTHWEST,
			GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));
		// right
		panel.add(new JLabel("Право"),
			new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		conditionRightsComboBox = getRightsComboBox();
		panel.add(conditionRightsComboBox,
			new GridBagConstraints(1, 1, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		// subject
		panel.add(new JLabel("Субъект"),
			new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		conditionSubjectsComboBox = getSubjectsComboBox();
		panel.add(conditionSubjectsComboBox,
			new GridBagConstraints(1, 2, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		// object
		panel.add(new JLabel("Объект"),
			new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		conditionObjectsComboBox = getObjectsComboBox();
		panel.add(conditionObjectsComboBox,
			new GridBagConstraints(1, 3, GridBagConstraints.REMAINDER, 1, 100.0, 0.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(0, 0, 5, 5), 0, 0));
		// add
		panel.add(getConditionAddButton(),
			new GridBagConstraints(0, 4, GridBagConstraints.REMAINDER, 1, 1.0, 0.0, GridBagConstraints.NORTHEAST,
			GridBagConstraints.NONE, new Insets(0, 0, 5, 5), 0, 0));
		panel.add(new JPanel(),
			new GridBagConstraints(0, 5, GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, 1.0, 100.0,
			GridBagConstraints.NORTHEAST, GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));
		return panel;
	}
	protected void doOk() {
		setId();
		closeFrame();
	}
	protected void init() {
		this.setSize(600, 500);
		initPropertiesPanel();
		GridBagLayout layout = new GridBagLayout();
		getContentPane().setLayout(layout);
		getContentPane().add(propertiesPanel,
			new GridBagConstraints(0, 0, GridBagConstraints.REMAINDER, 1, 1.0, 1.0, GridBagConstraints.NORTH,
			GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));
		getContentPane().add(initConditionPanel(),
			new GridBagConstraints(0, 1, GridBagConstraints.RELATIVE, 1, 1.0, 100.0, GridBagConstraints.NORTH,
			GridBagConstraints.BOTH, new Insets(0, 5, 5, 5), 0, 0));
		operationPanel = initOperationPanel();
		getContentPane().add(operationPanel,
			new GridBagConstraints(1, 1, GridBagConstraints.REMAINDER, 1, 1.0, 100.0, GridBagConstraints.NORTH,
			GridBagConstraints.BOTH, new Insets(0, 5, 5, 5), 0, 0));
		getContentPane().add(initInfoPanel(),
			new GridBagConstraints(0, 2, GridBagConstraints.REMAINDER, 1, 1.0, 100.0, GridBagConstraints.NORTH,
			GridBagConstraints.BOTH, new Insets(0, 5, 5, 5), 0, 0));
		initButtonPanel();
		getContentPane().add(buttonPanel,
			new GridBagConstraints(0, 3, GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, 1.0, 1.0,
			GridBagConstraints.SOUTH, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));
		updateOperationParamPanel();
	}
	protected void initPropertiesPanel() {
		propertiesPanel = new JPanel();
		setBackground(propertiesPanel.getBackground());
		propertiesPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Свойства"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		GridBagLayout layout = new GridBagLayout();
		propertiesPanel.setLayout(layout);
		GridBagConstraints c;
		c = new GridBagConstraints();
		c.gridwidth = 1;
		c.gridheight = 1;
		c.fill = GridBagConstraints.VERTICAL;
		c.weightx = 1;
		c.insets = new Insets(0, 10, 0, 0);
		propertiesPanel.add(new JLabel("Идентификатор:"), c);
		c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridheight = 1;
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 100;
		c.insets = new Insets(0, 5, 0, 10);
		idField = new JTextField(getBean().getId());
		propertiesPanel.add(idField, c);
		c.gridwidth = 1;
		c.gridheight = 1;
		c.fill = GridBagConstraints.VERTICAL;
		c.weightx = 1;
		c.insets = new Insets(5, 10, 0, 0);
	}
	protected void initButtonPanel() {
		buttonPanel = new JPanel();
		GridBagLayout layout = new GridBagLayout();
		buttonPanel.setLayout(layout);
		JButton button = new JButton("Закрыть");
		button.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) { doOk(); }
			});
		GridBagConstraints c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridheight = 1;
		c.fill = GridBagConstraints.VERTICAL;
		c.weightx = 1;
		c.insets = new Insets(5, 5, 5, 5);
		c.anchor = GridBagConstraints.EAST;
		buttonPanel.add(button, c);
	}
}

