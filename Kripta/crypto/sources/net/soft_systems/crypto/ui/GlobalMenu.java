/* Generated by Together */

package net.soft_systems.crypto.ui;
import java.awt.event.*;
import javax.swing.*;
import net.soft_systems.crypto.Run;
import net.soft_systems.integrator.Debug;
import net.soft_systems.integrator.event.InitMenuListener;
/**
 * Object which initializes global menu of frame
 */
public class GlobalMenu implements InitMenuListener {
	/**
	 * Initialises structure managing menus
	 * @return Structure Submenu with child menus
	 */
	public JMenu getStructureMenu() {
		JMenu subMenu = new JMenu(Run.integrator.messages.getMessage("structure-menu"));
		subMenu.setMnemonic(KeyEvent.VK_S);
		JMenuItem menuItem = new JMenuItem(Run.integrator.messages.getMessage("elements-menu"));
		menuItem.setMnemonic(KeyEvent.VK_E);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.actions.defineStructureElements(); }
			});
		subMenu.add(menuItem);
		return subMenu;
	}
	/**
	 * Initialises Analysis menus
	 * @return Structure Submenu with child menus
	 */
	public JMenu getAnalysisMenu() {
		JMenu subMenu = new JMenu(Run.integrator.messages.getMessage("analize-menu"));
		subMenu.setMnemonic(KeyEvent.VK_A);
		JMenuItem menuItem = new JMenuItem(Run.integrator.messages.getMessage("protection-menu"));
		menuItem.setMnemonic(KeyEvent.VK_P);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.actions.analizeProtection(); }
			});
		subMenu.add(menuItem);
		return subMenu;
	}
	/**
	 * Initialises Security Policy menus
	 * @return Structure Submenu with child menus
	 */
	public JMenu getPolicyMenu() {
		JMenu subMenu = new JMenu(Run.integrator.messages.getMessage("policy-menu"));
		subMenu.setMnemonic(KeyEvent.VK_P);
		JMenuItem menuItem = new JMenuItem(Run.integrator.messages.getMessage("policy-models-menu"));
		menuItem.setMnemonic(KeyEvent.VK_M);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.actions.selectPolicyModels(); }
			});
		subMenu.add(menuItem);
		return subMenu;
	}
	/**
	 * Initialises Modelling Menus
	 * @return Modelling Submenu with child menus
	 */
	public JMenu getModelMenu() {
		JMenu subMenu = new JMenu(Run.integrator.messages.getMessage("model-menu"));
		subMenu.setMnemonic(KeyEvent.VK_M);
		JMenuItem menuItem;
		menuItem = new JMenuItem("Сгенерировать код процессов");
		menuItem.setMnemonic(KeyEvent.VK_S);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.actions.genProcesses(); }
			});
		subMenu.add(menuItem);
		menuItem = new JMenuItem(Run.integrator.messages.getMessage("model-startserver-menu"));
		menuItem.setMnemonic(KeyEvent.VK_S);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { Run.actions.startModelServer(); }
			});
		subMenu.add(menuItem);
		menuItem = new JMenuItem("Завершить моделирование");
		menuItem.setMnemonic(KeyEvent.VK_K);
		menuItem.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					try { Run.actions.stopModelServer(); }
					catch (Exception ex)
						{ Debug.error("Ошибка при завершении сервера моделирования " + ex.getMessage()); }
				}
			});
		subMenu.add(menuItem);
		return subMenu;
	}
	/**
	 * Can add menus to menubar
	 * @param menu Menu object. It must not be changed. Adding submenus is allowed only.
	 */
	public void init(JMenuBar menu) {
		// Structure menu
		menu.add(getStructureMenu());
		// Analize menu
		menu.add(getAnalysisMenu());
		// Policy menu
		menu.add(getPolicyMenu());
		// Model menu
		menu.add(getModelMenu());
	}
}

