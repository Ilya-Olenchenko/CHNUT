/* Generated by Together */

package net.soft_systems.crypto.frames;
import java.awt.*;
import java.awt.event.*;
import java.util.Vector;
import javax.swing.*;
import javax.swing.border.EtchedBorder;
import net.soft_systems.integrator.*;
public class SingleRelationPanel extends JPanel {
	public SingleRelationPanel(CryptoEditFrame cryptoEditFrame) {
		super();
		this.cryptoEditFrame = cryptoEditFrame;
		Bean bean = cryptoEditFrame.getBean();
		if (RelationEnabledBean.class.isAssignableFrom(bean.getClass())) {
			relationBean = (RelationEnabledBean)bean;
			leftObjects = relationBean.getAvailObjects();
			Vector rightObjects = relationBean.getAccessedObjects();
			if (rightObjects.size() > 0) { rightObject = rightObjects.elementAt(0); }
			else { rightObject = null; }
		}
		else {
			Debug.debug("Bean " + bean + " of class " + bean.getClass().getName() +
				" must implement RelationBean to edit relations");
		}
		init();
	}
	protected void init() {
		GridBagLayout gridBagLayout1 = new GridBagLayout();
		GridBagConstraints gridBagConstraints1;
		toRightButton.setText(">");
		toLeftButton.setText("<");
		leftList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Отношения"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		setLayout(gridBagLayout1);
		add(leftPanel,
			new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.BOTH,
			new Insets(0, 0, 0, 0), 0, 0));
		add(centerPanel,
			new GridBagConstraints(1, GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, 1, 0.0, 1.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
		add(rightPanel,
			new GridBagConstraints(2, GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER, 1, 1.0, 1.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
		infoLabel.setText(relationBean.getRelationInfo());
		infoLabel.setEditable(false);
		infoLabel.setBackground(getBackground());
		infoScrollPane = new JScrollPane(infoLabel);
		infoScrollPane.setMinimumSize(new Dimension(300, 80));
		infoScrollPane.setPreferredSize(new Dimension(300, 80));
		add(infoScrollPane,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, 3, 1, 0.0, 0.0,
			GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));
		gridBagConstraints1 = new GridBagConstraints();
		gridBagConstraints1.gridwidth = GridBagConstraints.REMAINDER;
		gridBagConstraints1.gridheight = 1;
		gridBagConstraints1.fill = GridBagConstraints.BOTH;
		gridBagConstraints1.weightx = 100;
		gridBagConstraints1.insets = new Insets(0, 5, 0, 10);
		gridBagLayout1 = new GridBagLayout();
		gridBagConstraints1 = new GridBagConstraints();
		gridBagConstraints1.gridwidth = GridBagConstraints.REMAINDER;
		gridBagConstraints1.gridheight = 1;
		gridBagConstraints1.fill = GridBagConstraints.HORIZONTAL;
		gridBagConstraints1.weightx = 1;
		gridBagConstraints1.weighty = 1;
		gridBagConstraints1.insets = new Insets(5, 5, 5, 5);
		gridBagConstraints1.anchor = GridBagConstraints.NORTH;
		leftPanel.setLayout(new GridBagLayout());
		leftPanel.add(leftLabel,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE,
			GridBagConstraints.REMAINDER, 1, 1.0, 0.0, GridBagConstraints.SOUTHWEST, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));
		JScrollPane leftScroll = new JScrollPane(leftList);
		leftPanel.add(leftScroll,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE, 1, 1, 1.0, 100.0,
			GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 5, 5, 5), 0, 0));
		leftLabel.setText(relationBean.getAvailObjectsName());
		leftScroll.setMinimumSize(new Dimension(100, 100));
		leftScroll.setPreferredSize(new Dimension(100, 150));
		rightPanel.setLayout(new GridBagLayout());
		rightLabel.setText(relationBean.getAccessedObjectsName());
		rightPanel.add(rightLabel,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE,
			GridBagConstraints.REMAINDER, 1, 1.0, 0.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(5, 5, 5, 5), 0, 0));
		rightObjectLabel.setEditable(false);
		rightObjectLabel.setBorder(new EtchedBorder());
		rightPanel.add(rightObjectLabel,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE,
			GridBagConstraints.REMAINDER, 1, 1.0, 100.0, GridBagConstraints.NORTH, GridBagConstraints.HORIZONTAL,
			new Insets(0, 6, 5, 5), 0, 0));
		centerPanel.setLayout(new GridBagLayout());
		centerPanel.add(toLeftButton,
			new GridBagConstraints(0, 0, GridBagConstraints.REMAINDER, 1, 0.0, 0.0, GridBagConstraints.CENTER,
			GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));
		centerPanel.add(toRightButton,
			new GridBagConstraints(GridBagConstraints.RELATIVE, GridBagConstraints.RELATIVE,
			GridBagConstraints.REMAINDER, 1, 0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL,
			new Insets(0, 5, 5, 5), 0, 0));
		// setting listeners
		toRightButton.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { moveToRight(); }
			});
		toLeftButton.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent e) { moveToLeft(); }
			});
		leftList.addMouseListener(
			new MouseAdapter() {
				public void mouseClicked(MouseEvent e) {
					if (e.getClickCount() > 1) { moveToRight(); }
				}
			});
		rightObjectLabel.addMouseListener(
			new MouseAdapter() {
				public void mouseClicked(MouseEvent e) {
					if (e.getClickCount() > 1) { moveToLeft(); }
				}
			});
		//setting lists data
		resetLists();
	}
	protected void moveToRight() {
		if (leftList.getSelectedIndex() >= 0 && leftList.getSelectedIndex() < leftObjects.size()) {
			Object obj = leftList.getSelectedValue();
			if (rightObject != null) { leftObjects.add(rightObject); }
			rightObject = obj;
			leftObjects.remove(obj);
		}
		resetLists();
	}
	protected void moveToLeft() {
		if (rightObject != null) {
			leftObjects.add(rightObject);
			rightObject = null;
		}
		resetLists();
	}
	protected void resetLists() {
		if (relationBean != null) {
			leftList.setListData(leftObjects);
			if (rightObject != null) { rightObjectLabel.setText("" + rightObject); }
			else { rightObjectLabel.setText("Нет"); }
		}
	}
	public void setRelations() {
		if (relationBean != null) {
			Vector rightObjects = new Vector();
			if (rightObject != null) { rightObjects.add(rightObject); }
			relationBean.setAccessedObjects(rightObjects);
		}
	}
	/**
	 * @associates Object
	 */
	private Vector leftObjects;
	private Object rightObject;
	private JPanel leftPanel   = new JPanel();
	private JPanel centerPanel = new JPanel();
	private JPanel rightPanel  = new JPanel();
	private JScrollPane infoScrollPane;
	private JEditorPane infoLabel      = new JEditorPane("text/html", "");
	private JList leftList             = new JList();
	private JTextArea rightObjectLabel = new JTextArea();
	private JLabel leftLabel           = new JLabel();
	private JLabel rightLabel          = new JLabel();
	private JButton toRightButton      = new JButton();
	private JButton toLeftButton       = new JButton();
	private CryptoEditFrame cryptoEditFrame;
	private RelationEnabledBean relationBean;
}

