/* Generated by Together */

package net.soft_systems.crypto;
import java.net.MalformedURLException;
import java.rmi.*;
import java.util.*;
import javax.swing.JOptionPane;
import net.soft_systems.crypto.beans.process.ProcessBean;
import net.soft_systems.crypto.frames.policy.PolicyModelsFrame;
import net.soft_systems.crypto.frames.structure.*;
import net.soft_systems.integrator.Debug;
import net.soft_systems.model.server.ModelServerImpl;
/**
 * Object which contains methods called via user interface
 */
public class Actions {
	/**
	 * Constructs Actions object with parent frame
	 */
	public Actions() { }
	/**
	 * Method shows dialog for setting elements of cryptosystem
	 */
	public void defineStructureElements() {
		StructureElementsDialog dialog = new StructureElementsDialog();
		if (Run.integrator.addFrameToDesktop(dialog)) { this.structureDialog = dialog; }
	}
	/**
	 * shows dialog for analysing protection of system
	 */
	public void analizeProtection() {
		AnalizeStrengthDialog dialog = new AnalizeStrengthDialog(Run.infoSystem.getRelationsWithThreats());
		if (Run.integrator.addFrameToDesktop(dialog)) { this.analizeStrengthDialog = dialog; }
	}
	/**
	 * shows dialog for selecting and editiong properties of policy models
	 */
	public void selectPolicyModels() {
		PolicyModelsFrame dialog = new PolicyModelsFrame();
		if (Run.integrator.addFrameToDesktop(dialog)) { this.policyModelsDialog = dialog; }
	}
	public void genProcesses() {
		Vector processes = Run.infoSystem.getProcesses();
		Enumeration e = processes.elements();
		ProcessBean p;
		while (e.hasMoreElements()) {
			p = (ProcessBean)e.nextElement();
			p.gen();
		}
	}
	public void startModelServer() {
		String url = "rmi://127.0.0.1:1234/";
		if (url != null) {
			try {
				ModelServerImpl server = ModelServerImpl.start(url);
				JOptionPane.showMessageDialog(Run.integrator.getParentFrame(),
					"Сервер моделирования запущен.\n Имя привязки сервера: " + server.getFullBindName(),
					"Сообщение", JOptionPane.INFORMATION_MESSAGE);
				Run.server = server;
			}
			catch (ConnectException ex) {
				Debug.error("Ошибка регистрации сервера. Вероятно не запущен rmiregistry " + ex.getMessage());
				JOptionPane.showMessageDialog(Run.integrator.getParentFrame(),
					"Не удалось зарегистрировать сервер. Вероятно не запущен сервер rmiregistry", "Ошибка",
					JOptionPane.ERROR_MESSAGE);
			}
			catch (MalformedURLException ex) {
				Debug.error("Ошибка в url " + ex.getMessage());
				JOptionPane.showMessageDialog(Run.integrator.getParentFrame(),
					"Не удалось зарегистрировать сервер. Неправильный формат url для регистрации", "Ошибка",
					JOptionPane.ERROR_MESSAGE);
			}
			catch (RemoteException ex) {
				Debug.error("Ошика удаленного вызова " + ex.getMessage());
				JOptionPane.showMessageDialog(Run.integrator.getParentFrame(),
					"Не удалось зарегистрировать сервер. Возникла исключительная ситуация", "Ошибка",
					JOptionPane.ERROR_MESSAGE);
			}
			catch (Exception ex) {
				Debug.error("Неизвестная ошибка " + ex.getMessage());
				JOptionPane.showMessageDialog(Run.integrator.getParentFrame(),
					"Не удалось зарегистрировать сервер. Возникла исключительная ситуация", "Ошибка",
					JOptionPane.ERROR_MESSAGE);
			}
		}
	}
	public void stopModelServer() throws RemoteException, MalformedURLException, NotBoundException {
		if (Run.server != null) {
			Run.server.finish();
			Run.server = null;
		}
	}
	public StructureElementsDialog structureDialog;
	public AnalizeStrengthDialog analizeStrengthDialog;
	protected PolicyModelsFrame policyModelsDialog;
}

