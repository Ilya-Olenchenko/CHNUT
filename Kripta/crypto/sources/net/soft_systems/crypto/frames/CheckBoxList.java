/* Generated by Together */

package net.soft_systems.crypto.frames;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import net.soft_systems.integrator.Debug;
public class CheckBoxList extends JPanel {
	private JCheckBox selected;
	public JCheckBox getSelected() { return selected; }
	public void setSelected(JCheckBox cb) {
		if (selected != null) { selected.setForeground(Color.black); }
		this.selected = cb;
		selected.setForeground(Color.blue);
	}
	public int getSelectedIndex() { return getCheckBoxIndex(getSelected()); }
	private class CheckBoxListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (JCheckBox.class.isAssignableFrom(e.getSource().getClass())) {
				JCheckBox cb = (JCheckBox)e.getSource();
				int index = getCheckBoxIndex(cb);
				if (index >= 0) {
					if (cb.hasFocus()) {
						doSelectCheckBox(index);
						setSelected(cb);
					}
					doCheckCheckBox(index, cb.isSelected());
				}
			}
		}
	};
	protected void doSelectCheckBox(int index) {
		Enumeration en = checkBoxListeners.elements();
		CheckBoxListListener list;
		while (en.hasMoreElements()) {
			list = (CheckBoxListListener)en.nextElement();
			list.selected(index);
		}
	}
	protected void doCheckCheckBox(int index, boolean checked) {
		Enumeration en = checkBoxListeners.elements();
		CheckBoxListListener list;
		while (en.hasMoreElements()) {
			list = (CheckBoxListListener)en.nextElement();
			list.checked(index, checked);
		}
	}
	public boolean isSelected(int index) {
		if (index < getComponentCount()) {
			JCheckBox cb = (JCheckBox)getComponents() [index];
			return cb.isSelected();
		}
		else {
			Debug.error("Неверный индекс в списке");
			return false;
		}
	}
	public int getCheckBoxCount() { return getComponentCount(); }
	public int getCheckBoxIndex(JCheckBox cb) {
		if (cb == null) { return -1; }
		Component[] comps = getComponents();
		for (int i = 0; i < comps.length; i++) {
			if (comps[i] == cb) { return i; }
		}
		return -1;
	}
	protected CheckBoxListener checkBoxListener;
	/**
	 * @associates CheckBoxListListener
	 */
	private Vector checkBoxListeners = new Vector();
	public void addCheckBoxListener(CheckBoxListListener listener) { checkBoxListeners.add(listener); }
	public void removeCheckBoxListener(CheckBoxListListener listener) { checkBoxListeners.remove(listener); }
	public Insets getInsets() { return new Insets(0, 4, 0, 0); }
	public CheckBoxList() {
		super();
		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		setForeground(Color.black);
		checkBoxListener = new CheckBoxListener();
	}
	protected JCheckBox createCheckBox(String name, boolean checked) {
		JCheckBox cb = new JCheckBox(name);
		cb.setBackground(getBackground());
		cb.addActionListener(checkBoxListener);
		cb.setSelected(checked);
		return cb;
	}
	public void addCheckBox(String name, boolean checked) { this.add(createCheckBox(name, checked)); }
	public void addCheckBox(String name) { this.add(createCheckBox(name, false)); }
}

