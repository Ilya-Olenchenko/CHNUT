/* Generated by Together */

package net.soft_systems.crypto.frames.policy;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyVetoException;
import java.util.*;
import javax.swing.*;
import net.soft_systems.crypto.Run;
import net.soft_systems.crypto.beans.policy.RightBean;
import net.soft_systems.crypto.frames.*;
import net.soft_systems.integrator.*;
public class RightEditor extends JInternalFrame {
	/**
	 * @associates RightBean
	 */
	private Vector rights;
	private Vector availRights;
	public RightEditor(String title, Vector rights, Vector availRights) {
		super(title);
		this.rights = rights;
		this.availRights = availRights;
		init();
		initData();
	}
	protected CheckBoxList list;
	protected JPanel getRightsPanel() {
		JPanel rightsPanel = new JPanel();
		rightsPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Права доступа"),
			BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		JPanel listPanel = new JPanel();
		JPanel buttonPanel = new JPanel();
		list = new CheckBoxList();
		JScrollPane scrollListPane = new JScrollPane(list);
		// adding ui elements
		rightsPanel.setLayout(new GridBagLayout());
		rightsPanel.add(listPanel,
			new GridBagConstraints(0, 0, 1, GridBagConstraints.REMAINDER, 1.0, 1.0, GridBagConstraints.SOUTHWEST,
			GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
		rightsPanel.add(buttonPanel,
			new GridBagConstraints(1, 0, 1, 1, 0.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.BOTH,
			new Insets(0, 0, 0, 0), 0, 0));
		listPanel.setLayout(new GridBagLayout());
		listPanel.add(scrollListPane,
			new GridBagConstraints(0, GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER,
			GridBagConstraints.REMAINDER, 1.0, 1.0, GridBagConstraints.CENTER, GridBagConstraints.BOTH,
			new Insets(5, 5, 5, 5), 0, 0));
		buttonPanel.setLayout(new GridBagLayout());
		return rightsPanel;
	}
	protected JPanel getButtonPanel() {
		JPanel buttonPanel = new JPanel();
		GridBagLayout layout = new GridBagLayout();
		buttonPanel.setLayout(layout);
		JButton button = new JButton("OK");
		button.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) { doOk(); }
			});
		GridBagConstraints c = new GridBagConstraints();
		c.gridwidth = 10;
		c.gridheight = 1;
		c.fill = GridBagConstraints.VERTICAL;
		c.weightx = 100;
		c.insets = new Insets(5, 0, 5, 0);
		c.anchor = GridBagConstraints.EAST;
		buttonPanel.add(button, c);
		button = new JButton("Отмена");
		button.addActionListener(
			new ActionListener() {
				public void actionPerformed(ActionEvent event) { doCancel(); }
			});
		c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridheight = 1;
		c.fill = GridBagConstraints.VERTICAL;
		c.weightx = 1;
		c.insets = new Insets(5, 5, 5, 5);
		c.anchor = GridBagConstraints.EAST;
		buttonPanel.add(button, c);
		return buttonPanel;
	}
	public void closeDialog() {
		try { setClosed(true); }
		catch (PropertyVetoException ex) { ex.printStackTrace(); }
	}
	protected void setRights() {
		Vector availRights = Run.infoSystem.getRights();
		for (int i = 0; i < list.getCheckBoxCount(); i++) {
			RightBean right = (RightBean)getAvailRight(i);
			if (list.isSelected(i)) {
				if (!rights.contains(right)) { rights.add(right); }
			}
			else {
				if (rights.contains(right)) { rights.remove(right); }
			}
		}
	}
	protected void doOk() {
		setRights();
		closeDialog();
	}
	protected void doCancel() { closeDialog(); }
	public void init() {
		setBounds(new Rectangle(0, 0, 379, 446));
		JPanel rightsPanel = getRightsPanel();
		JPanel buttonPanel = getButtonPanel();
		setBackground(rightsPanel.getBackground());
		GridBagLayout layout = new GridBagLayout();
		getContentPane().setLayout(layout);
		GridBagConstraints c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridheight = GridBagConstraints.RELATIVE;
		c.fill = GridBagConstraints.BOTH;
		c.weightx = 1;
		c.weighty = 100;
		c.insets = new Insets(5, 5, 5, 5);
		getContentPane().add(rightsPanel, c);
		c = new GridBagConstraints();
		c.gridwidth = GridBagConstraints.REMAINDER;
		c.gridheight = GridBagConstraints.REMAINDER;
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.weighty = 1;
		c.insets = new Insets(0, 0, 0, 0);
		c.anchor = GridBagConstraints.SOUTH;
		getContentPane().add(buttonPanel, c);
	}
	protected Bean getAvailRight(int index) { return (Bean)availRights.get(index); }
	protected void initData() {
		Enumeration en = availRights.elements();
		RightBean right;
		while (en.hasMoreElements()) {
			right = (RightBean)en.nextElement();
			list.addCheckBox(right.toString(), rights.contains(right));
		}
		list.addCheckBoxListener(
			new CheckBoxListListener() {
				public void selected(int index) {
					Debug.debug("Selected check box " + index + "Right " + getAvailRight(index));
				}
				public void checked(int index, boolean checked) {
					Debug.debug("Checked check box " + index + "Right " + getAvailRight(index) + " State " + checked);
				}
			});
	}
}

