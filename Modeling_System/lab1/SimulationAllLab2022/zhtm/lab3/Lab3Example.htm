<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:35.45pt;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
h1
	{mso-style-name:"Заголовок 1\,Знак";
	mso-style-link:"Заголовок 1 Знак";
	margin-top:0cm;
	margin-right:39.7pt;
	margin-bottom:18.0pt;
	margin-left:148.95pt;
	text-align:center;
	text-indent:85.0pt;
	page-break-before:always;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	color:maroon;
	text-transform:uppercase;}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-top:18.0pt;
	margin-right:39.7pt;
	margin-bottom:12.0pt;
	margin-left:36.0pt;
	text-indent:0cm;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;}
h3
	{mso-style-link:"Заголовок 3 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:6.0pt;
	margin-left:164.2pt;
	text-indent:-110.2pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	font-style:italic;}
h4
	{mso-style-link:"Заголовок 4 Знак1";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:6.0pt;
	margin-left:32.4pt;
	text-indent:-32.4pt;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial",sans-serif;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-link:"Название объекта Знак";
	margin-top:6.0pt;
	margin-right:2.0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	text-align:center;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Основной текст Знак";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:35.45pt;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
span.1
	{mso-style-name:"Заголовок 1 Знак";
	mso-style-link:"Заголовок 1\,Знак";
	font-family:"Arial",sans-serif;
	color:maroon;
	text-transform:uppercase;
	font-weight:bold;}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Arial",sans-serif;
	font-weight:bold;}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-link:"Заголовок 3";
	font-family:"Arial",sans-serif;
	font-weight:bold;
	font-style:italic;}
span.4
	{mso-style-name:"Заголовок 4 Знак";
	font-family:"Calibri Light",sans-serif;
	color:#2E74B5;
	font-style:italic;}
p.a, li.a, div.a
	{mso-style-name:"Стиль основного текста";
	mso-style-link:"Стиль основного текста Знак1";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
span.10
	{mso-style-name:"Стиль основного текста Знак1";
	mso-style-link:"Стиль основного текста";
	font-family:"Times New Roman",serif;}
span.41
	{mso-style-name:"Заголовок 4 Знак1";
	mso-style-link:"Заголовок 4";
	font-family:"Arial",sans-serif;
	font-weight:bold;}
p.a0, li.a0, div.a0
	{mso-style-name:"Стиль для списка";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.05pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-14.2pt;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
p.a1, li.a1, div.a1
	{mso-style-name:"Стиль текста программ в рамке";
	mso-style-link:"Стиль текста программ в рамке Знак";
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
p.a2, li.a2, div.a2
	{mso-style-name:Листинг;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman",serif;}
span.a3
	{mso-style-name:"Стиль текста программ в рамке Знак";
	mso-style-link:"Стиль текста программ в рамке";
	font-family:"Times New Roman",serif;}
span.a4
	{mso-style-name:"Название объекта Знак";
	mso-style-link:"Название объекта";
	font-family:"Times New Roman",serif;}
span.a5
	{mso-style-name:"Основной текст Знак";
	mso-style-link:"Основной текст";
	font-family:"Times New Roman",serif;}
.MsoChpDefault
	{font-family:"Calibri",sans-serif;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=UK>

<div class=WordSection1>

<h2 style='margin-top:18.0pt;margin-right:2.85pt;margin-bottom:12.0pt;
margin-left:65.2pt;text-indent:-1.0cm'><a name="_Toc392262888"></a><a
name="_Toc181594844">1.1  Приклад </a>побудови програмної системи для
моделювання</h2>

<p class=MsoNormal>Розглянемо проект, який ми будемо використовувати для
досліджень у наступних лабораторних роботах. Це модель найпростішої системи
масового обслуговування.</p>

<p class=MsoNormal>Схему такої системи зображено на рисунку 3.1. Вона
складається з черги для транзакцій та обслуговуючого пристрою. Окрім цього в
моделі доведеться використовувати генератор транзакцій, який на схемі
відсутній.</p>

<p class=MsoNormal>Нам потрібно створити Java застосування для імітаційного
моделювання такої системи, яке дозволить:</p>

<p class=a0 style='margin-left:0cm;text-indent:39.7pt'><span style='font-family:
Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>налаштування параметрів моделі, а саме: закони розподілення для
випадкових величин інтервалу часу між появами транзакцій та часу обслуговування
транзакції, кількість обслуговуючих пристроїв, тривалість моделювання;</p>

<p class=a0 style='margin-left:0cm;text-indent:39.7pt'><span style='font-family:
Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>проведення тестових запусків моделі при різних налаштуваннях з
динамічною індикацією розміру черги, та виведення протоколу роботи моделі під
час тестових запусків;</p>

<p class=a0 style='margin-left:0cm;text-indent:39.7pt'><span style='font-family:
Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>проведення експериментів для отримання статистичних даних про
довжину черги, загальний час перебування транзакції у черзі, та час простою обслуговуючого
пристрою.</p>

<h3 style='margin-top:12.0pt;margin-right:39.7pt;margin-bottom:3.0pt;
margin-left:70.9pt;text-indent:-34.05pt'><a name="_Toc392262889"><span lang=RU
style='font-size:13.0pt;font-style:normal'>1.1.1 </span><span style='font-size:
13.0pt'>Аналіз системи</span></a></h3>

<p class=a><span style='color:black'>Аналіз системи полягає у визначенні
абстракцій, що входять до складу системи і дозволяють вирішувати поставлені
завдання.</span></p>

<h4 style='margin-left:68.35pt'><span style='color:black;font-weight:normal'>1.1.1.1
</span><span style='color:black'>Абстракція «генератор заявок»</span></h4>

<p class=a><span style='color:black'>Абстракція «генератор заявок» моделює зовнішнє
середовище системи з якого з’являються транзакції. Завдання «генератора заявок»
полягає у тому, щоб через випадкові інтервали часу створювати нові транзакції і
додавати їх до черги. Характерною рисою цієї абстракції є наявність затримок на
випадковий час перед створенням кожної транзакції. Тому для програмної
реалізації абстракції слід створити клас, який має бути нащадком класу </span><span
lang=EN-US style='color:black'>process.Actor.</span></p>

<h4 style='margin-left:68.35pt'><span style='color:black;font-weight:normal'>1.1.1.2
</span><span style='color:black'>Абстракція «обслуговуючий пристрій»</span></h4>

<p class=a>Завдання «обслуговуючого пристрою» – обробка транзакцій, що чекають
на обслуговування у черзі. Якщо черга пуста, «обслуговуючий пристрій» чекає на
появу транзакції. Після появи транзакції він забирає її з черги і затримується
у на випадковий час, імітуючи обробку транзакції. Далі цикл повторюється.
Наявність затримок на деякий час та можливість переходу у режим чекання
свідчить про те, що для програмної реалізації цієї <span style='color:black'>абстракції
слід створити клас, який має бути нащадком класу </span><span lang=EN-US
style='color:black'>process.Actor.</span></p>

<h4 style='margin-left:68.35pt'><span style='color:black;font-weight:normal'>1.1.1.3
</span><span style='color:black'>Абстракція «транзакція»</span></h4>

<p class=a><span style='color:black'>Ця абстракція моделює якусь сутність, що
потребує обслуговування. «Транзакція» є пасивним елементом. Цю сутність створює
«генератор заявок» і додає до черги. «Обслуговуючий пристрій» забирає її з
черги і імітує обслуговування. Виходячи з того, що нам потрібно фіксувати
тривалість перебування цієї абстракції у черзі, слід пов’язати з кожною
транзакцією час її появи в системі. Таким чином, «транзакція» може бути
об’єктом звичайного класу з полем типу </span><span lang=EN-US
style='color:black'>double, </span><span style='color:black'>або навіть просто
об’єктом типу </span><span lang=EN-US style='color:black'>Double.</span></p>

<h4 style='margin-left:68.35pt'><span style='color:black;font-weight:normal'>1.1.1.4
</span><span style='color:black'>Абстракція «черга транзакцій»</span></h4>

<p class=a><span style='color:black'>Завдання цієї абстракції – накопичувати
«транзакції», що чекають на обслуговування. Для програмної реалізації таких
абстракцій у фреймворці </span><span lang=EN-US style='color:black'>Simulation </span><span
style='color:black'>існує клас </span><span lang=EN-US style='color:black'>process.QueueForTransaction.</span></p>

<h4 style='margin-left:78.0pt;text-indent:-42.05pt'><span style='color:black;
font-weight:normal'>1.1.1.5 </span><span style='color:black'>Абстракція «накопичувач
статистичної інформації про розміри черги»</span></h4>

<p class=a><span style='color:black'>Ця абстракція потрібна для вирішення
завдання щодо накопичення статистичної інформації про довжину черги. Клас </span><span
lang=EN-US style='color:black'>stat.DiscretHisto </span><span style='color:
black'>фреймворку </span><span lang=EN-US style='color:black'>Simulation</span><span
style='color:black'> забезпечує вирішення такого завдання. Достатньо об’єкт
цього класу підключити до абстракції «черга транзакцій».</span></p>

<h4 style='margin-left:78.0pt;text-indent:-42.05pt'><span style='color:black;
font-weight:normal'>1.1.1.6 </span><span style='color:black'>Абстракція
«накопичувач статистичної інформації про час</span><span style='color:black'> </span><span
style='color:black'>перебування транзакції у черзі »</span></h4>

<p class=a><span style='color:black'>Ця абстракція потрібна для вирішення
завдання щодо накопичення статистичної інформації про час перебування
транзакції у черзі. Клас </span><span lang=EN-US style='color:black'>stat.Histo
</span><span style='color:black'>фреймворку </span><span lang=EN-US
style='color:black'>Simulation</span><span style='color:black'> забезпечує
вирішення такого завдання. Час перебування транзакції у черзі можна визначити</span><span
style='color:black'> </span><span style='color:black'>«обслуговуючий пристрій» перед
початком процесу обслуговування. Він має знайти різницю між поточним часом та
часом появи транзакції у системі і передати це число накопичувачу.</span></p>

<h4 style='margin-left:78.0pt;text-indent:-42.05pt'><span style='color:black;
font-weight:normal'>1.1.1.7 </span><span style='color:black'>Абстракція
«накопичувач статистичної інформації про час</span><span style='color:black'> </span><span
style='color:black'>простою обслуговуючого пристрою»</span></h4>

<p class=a><span style='color:black'>Ця абстракція потрібна для вирішення
завдання щодо накопичення статистичної інформації про час простою
обслуговуючого пристрою. Клас </span><span lang=EN-US style='color:black'>stat.Histo
</span><span style='color:black'>фреймворку </span><span lang=EN-US
style='color:black'>Simulation</span><span style='color:black'> забезпечує
вирішення такого завдання. Час простою об’єктів типу </span><span lang=EN-US
style='color:black'>Actor</span><span style='color:black'> у фреймворці</span><span
style='color:black'> </span><span style='color:black'>фіксується автоматично,
якщо об’єктові передано посилання на об’єкт типу </span><span lang=EN-US
style='color:black'>stat.Histo</span><span style='color:black'>. </span></p>

<h4 style='margin-left:78.0pt;text-indent:-42.05pt'><span style='color:black;
font-weight:normal'>1.1.1.8 </span><span style='color:black'>Результати аналізу
системи</span></h4>

<p class=a><span style='color:black'>Результати аналізу системи наведено у
таблиці 3.1</span></p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width="100%"
 style='width:100.0%;border-collapse:collapse;border:none'>
 <tr>
  <td width=539 colspan=2 valign=top style='width:404.0pt;border:none;
  border-bottom:solid windowtext 1.0pt;padding:5.65pt 5.4pt 4.25pt 0cm'>
  <p class=MsoNormal style='text-indent:0cm'>Таблиця 3.1 – Абстракції системи,
  що входять до складу моделі</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border:none;border-bottom:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='text-indent:0cm'>&nbsp;</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;text-indent:0cm'>Абстракція</p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;text-indent:0cm'>Перелік
  завдань</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=center style='text-align:center;text-indent:0cm'>Клас</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>generator</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Створювати
  через випадкові інтервали часу транзакції і додавати їх до черги.</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Generator (Actor)</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>device</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Забирати
  транзакції з черги і імітувати їх обробку затримкою у часі. У разі відсутності
  транзакцій, чекати на їх появу. Визначати час перебування транзакції у
  системі.  </p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Device</span></p>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>(Actor)</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>transaction</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Моделює
  сутність, що потребує обслуговування. Містить дані про час появи у системі.</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Transaction</span></p>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>(<span
  lang=EN-US>Object</span>)</p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>queue</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Зберігати
  транзакції, що чекають на обслуговування. Взаємодіяти з накопичувачем <span
  lang=EN-US>DiscretHisto</span> та діаграмою.</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>QueueFor- Transaction</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>discretHistoForQueue</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Накопичувати
  інформацію про розмір черги. </p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Discret-Histo</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>histoTrans-actionWaitInQueue</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Накопичувати
  інформацію про час перебування у системі.</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Histo</span></p>
  </td>
 </tr>
 <tr>
  <td width=113 valign=top style='width:3.0cm;border:solid windowtext 1.0pt;
  border-top:none;padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>histoDevice</span><span lang=RU>-</span><span lang=EN-US>WaitTime</span></p>
  </td>
  <td width=425 valign=top style='width:318.95pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:2.85pt 5.4pt 2.85pt 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'>Накопичувати
  інформацію про час простою обслуговуючого пристрою.</p>
  </td>
  <td width=104 valign=top style='width:77.9pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;text-indent:0cm'><span
  lang=EN-US>Histo</span></p>
  </td>
 </tr>
</table>

</div>

<p class=a><span style='color:black'>&nbsp;</span></p>

<p class=a><span style='color:black'>До складу абстракцій додаємо також таку
абстракція, як модель системи у цілому, що об’єднує інші абстракції і є
об’єктом експериментального дослідження під час моделювання.</span></p>

<h3 style='margin-top:12.0pt;margin-right:39.7pt;margin-bottom:3.0pt;
margin-left:70.9pt;text-indent:-34.05pt'><a name="_Toc392262891"><span lang=RU
style='font-size:13.0pt;font-style:normal'>1.1.2 </span><span style='font-size:
13.0pt'>Реалізація шару подання</span></a></h3>

<p class=MsoNormal>Основою шару подання є інтерфейс користувача, який
представлено на рисунках 3.1 – 3.2. Інтерфейс був створений відповідно до
завдань, що були визначені вище. Інтерфейс спроектовано як сукупність декількох
основних панелей.</p>

<p class=a>Основою інтерфейсу є компонент <span lang=EN-US>J</span>SplitPanel. </p>

<p class=a>Ліву частину цього компоненту займає панель для розміщення елементів
налаштування моделі і присутня на екрані у всіх режимах роботи. У якості
менеджера компоновки цієї панелі вибрано GridLayout. </p>

<p class=MsoNormal>Праворуч розташований компонент <span lang=EN-US>J</span>TabbedPane,
на закладках якого розташовані панелі<span lang=EN-US> JPanel</span>, що з’являються
після вибору відповідного режиму роботи. </p>

<h3 style='margin-left:72.0pt;text-indent:-36.0pt'><a name="_Toc392262893"></a><a
name="_Toc390801303"><span lang=RU style='font-style:normal'>1.1.3 </span>Режим
тестування моделі</a></h3>

<p class=MsoNormal>Закладка «<span lang=EN-US>Test</span>», рисунок 3.2,
використовується для тестування роботи моделі із динамічною індикацією зміни
розмірів  черг у часі та виведенням протоколу роботи моделі.</p>

<p class=MsoCaption style='margin-top:6.0pt;margin-right:0cm;margin-bottom:
6.0pt;margin-left:0cm'><img width=634 height=317 id="Рисунок 19"
src="Lab3Example.files/image001.png"></p>

<p class=MsoCaption style='margin-right:2.85pt'>Рисунок 3.2 – Інтерфейс
користувача моделі у режимі тестування</p>

<p class=MsoNormal> Для панелі застосовано менеджер компоновки GridBagLayout,
що надає багато можливостей для розташування компонентів на панелі та дозволяє
змінювати розміри панелі не порушуючи її дизайн.</p>

<p class=MsoNormal>Для того, щоб налаштування діаграм відповідали налаштуванням
моделі, подія сaretUpdate компоненту, що використовується для налаштування часу
моделювання, пов’язані з налаштуваннями параметру діаграми <span lang=EN-US>horisontalMaxText</span>.
Але цей зв’язок має підтримуватися тільки у тому випадку, якщо відкрита панель «<span
lang=EN-US>Test</span>»<span lang=EN-US>.</span></p>

<p class=MsoNormal>А для того, щоб відновити цей зв’язок після відкриття панелі
«<span lang=EN-US>Test</span>» використовується подія цієї панелі
componentShown.</p>

<p class=MsoNormal>Код методів, що реалізують ці зв’язки, наведено у лістингу
3.1.</p>

<p class=a2>Лістинг 3.<span lang=EN-US>1</span> - Методи оновлення налаштувань
діаграми</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     protected void on</span><span
lang=EN-US style='font-size:13.0pt'>Modeling</span><span style='font-size:13.0pt'>TimeCaretUpdate()
{</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if
(getJPanelTest().isShowing()) {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              getDiagramQueueSize().setHorizontalMaxText(</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>                        chooseDataFinishTime.getText());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     }</span></p>

<p class=a1CxSpMiddle><span lang=EN-US style='font-size:13.0pt'>     </span><span
style='font-size:13.0pt'>protected void onPanelTestComponentShown() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          // Штучно формуємо
подію CaretUpdate,</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          // щоб обновити налаштування
діаграми</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          getChooseDataFinishTime().select(0,0);</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Для запуску моделі у режимі тестування використовується
кнопка «Старт», з якою пов’язано виклик методу startTest().</p>

<p class=MsoNormal>Текст методу наведено у лістингу 3.2. </p>

<p class=a2>Лістинг 3. 2 - Метод запуску процесу моделювання у режимі
тестування</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     private void
startTest() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Готуємо
діаграму для виведення графіку</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          getDiagramQueue().clear();</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Створюємо
диспетчера</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          Dispatcher
dispatcher = new Dispatcher();          </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Створюємо модель
за допомогою фабрики</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          IModelFactory
factory = (d)-&gt; new Model(d, this);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          Model model =(Model)
factory.createModel(dispatcher);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          // Робимо кнопку
«Старт» недосяжною на період роботи моделі</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          getJButtonStart().setEnabled(false);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          dispatcher.addDispatcherFinishListener(</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>                   ()-&gt;getJButtonStart().setEnabled(true));</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Готуємо модель
до роботи у режимі тестування</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          model.initForTest();</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Запускаємо
модель</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          dispatcher.start();</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<h3 style='margin-left:72.0pt;text-indent:-36.0pt'><a name="_Toc392262894"></a><a
name="_Toc390801307"><span lang=RU style='font-style:normal'>1.1.4 </span>Публічний
програмний інтерфейс шару подання</a></h3>

<p class=MsoNormal>Ще одна важлива функція шару подання – надання доступу до
своїх компонент іншим класам. Перелік відповідних публічних методів наведено на
рисунку 3.3.</p>

<p class=MsoCaption><img width=320 height=129 id="Рисунок 20"
src="Lab3Example.files/image002.png"></p>

<p class=MsoCaption style='margin-right:2.85pt'>Рисунок 3.3 – Публічний
інтерфейс шару подання</p>

<h2 style='margin-left:63.0pt;text-indent:-27.0pt'><a name="_Toc392262895"></a><a
name="_Toc390801308"></a><a name="_Toc314560875"><span style='color:black'>1.2  </span><span
style='color:black'>Реалізація шару моделі</span></a></h2>

<p class=MsoNormal>Цей шар складається тільки з класу моделі.</p>

<h3 style='margin-left:72.0pt;text-indent:-36.0pt'><a name="_Toc392262896"></a><a
name="_Toc390801309"></a><a name="_Toc314560877"><span lang=RU
style='font-style:normal'>1.2.1 </span>Клас Model</a></h3>

<p class=MsoNormal>Клас <span lang=RU>Model</span> побудовано виходячи з того, що
модель буде створюватися перед кожним її запуском. Це значно спрощує
програмування і підвищує його надійність, тому що у цьому випадку усі
компоненти моделі теж створюються заново і не потребують ініціалізації.</p>

<p class=MsoNormal>Перелік атрибутів моделі наведено у лістингу 3.3.</p>

<p class=MsoNormal>Зверніть увагу, об’єкти типу <span lang=EN-US>Transaction </span>у
моделі не створюються. Їх буде створювати генератор транзакцій у процесі своєї
роботи.</p>

<p class=a2>Лістинг 3.3 -  Перелік атрибутів моделі</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     //Посилання на
диспетчера</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private Dispatcher
dispatcher;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     //Посилання на
візуальну частину</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private GUI gui;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     ////////Актори\\\\\\\\\</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Генератор транзакцій</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private Generator generator;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Обслуговуючий прилад</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private Device device;              </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     //Бригада обслуговуючих
пристроїв</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private MultiActor multiDevice;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     /////////Черги\\\\\\\\\</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Черга транзакцій</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private
QueueForTransactions&lt;Transaction&gt; queue;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     /////////Гістограми\\\\\\\\\\\\</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Гістограма для довжини
черги</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private DiscretHisto discretHistoQueue;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Гістограма для часу
перебування у черзі</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private Histo histoTransactionWaitInQueue;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     // Гістограма для часу
чекання Device</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     private Histo histoWaitDevice;</span></p>

<p class=a1CxSpLast><span style='font-size:10.0pt;font-family:Consolas;
color:black'>&nbsp;</span></p>

</div>

<p class=MsoNormal>Для створення моделі використовується конструктор з двома
параметрами, який забезпечує гарантовану передачу моделі посилань на візуальну
частину і диспетчера. Решта компонентів створюється безпосередньо у моделі.
Конструктор наведено у лістингу 3.4.</p>

<p class=MsoNormal>Конструктор забезпечує також передачу акторів моделі до
стартового списку диспетчера за допомогою методу componentsToStartList().</p>

<p class=a2>Лістинг 3.4 -  Конструктор моделі</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>public Model(Dispatcher d,
GUI g) {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if (d == null ||
g == null) {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              System.out.println(&quot;Не
визначено диспетчера або GUI для Model&quot;);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              System.out.println(&quot;Подальша
робота неможлива&quot;);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              System.exit(0);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          dispatcher = d;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          gui = g;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Передаємо
акторів до стартового списку диспетчера</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          componentsToStartList();</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Такий конструктор можна вважати стандартним для виконання
РГР, за виключенням назви класу. Натомість, зміст методу
componentsToStartList() залежіть від конкретного завдання. У нашому випадку цей
метод має вигляд, представлений у лістингу&nbsp;3.5.</p>

<p class=a2>Лістинг 3.5 -  Метод componentsToStartList()</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     public void
componentsToStartList() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          // Передаємо
акторів диспетчеру</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          dispatcher.addStartingActor(getGenerator());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          dispatcher.addStartingActor(getMultiDevice());</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Слід звернути увагу на те, що для звертання до акторів
використовуються методи get…(), у яких реалізовано відкладене створення
об’єктів.</p>

<p class=MsoNormal>Як приклад методу для створення актора наведемо метод get<span
lang=EN-US>Generator</span>(), лістинг 3.6. Для створення усіх акторів ми
будемо використовувати однаковий підхід, що полягає у використанні конструктора
з параметрами, які передають посилання на візуальну частину та на модель. Маючи
ці посилання, актор може отримати доступ до інформації, що потрібна йому для
функціонування.</p>

<p class=a2>Лістинг 3.6 -  Метод відкладеного створення об’єкту <span
lang=EN-US>generator</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     public Generator
getGenerator() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if (generator ==
null) {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              generator = new
Generator(&quot;Generator&quot;, gui, this);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          return generator;</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Об’єкти класу MultiActor створюються дещо інакше. Такому
об’єкту потрібно передати посилання на зразок, що буде клонуватися, та задати
кількість клонів. Зразок доцільно створювати у вигляді іменованого об’єкту. Це
спростить процедуру ініціалізації об’єкта, якщо така буде потрібна. Наводимо
тут метод створення бригади обслуговуючих пристроїв, лістинг 3.7.</p>

<p class=a2>Лістинг 3.7 –  Метод відкладеного створення бригади пристроїв</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     public MultiActor
getMultiDevice() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if (multiDevice
== null) {    </span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>               multiDevice
= new MultiActor();</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              multiDevice.setNameForProtocol(&quot;MultiActor
для бригади пристроїв&quot;);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              multiDevice.setOriginal(getDevice());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              multiDevice.setNumberOfClones(gui.getChooseDataN</span><span
lang=EN-US style='font-size:13.0pt'>d</span><span style='font-size:13.0pt'>evice().getInt());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          return multiDevice;</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Об’єкти для черг створюються також інакше. Посилання, що
необхідні чергам слід передавати або через конструктори з параметрами, або
через методи set…(). Для прикладу наведемо метод getQueue (), лістинг 3.8.</p>

<p class=a2>Лістинг 3.8 –  Метод відкладеного створення черги         </p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>public
QueueForTransactions&lt;Transaction&gt; getQueue() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if (queue == null)
{</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              queue = new
QueueForTransactions&lt;&gt;(&quot;Queue&quot;, dispatcher,</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>                        getDiscretHistoQueue());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          return queue;</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>     }</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>&nbsp;</span></p>

</div>

<p class=MsoNormal>Об’єкти для гістограм, зазвичай, не потребують додаткових
налаштувань. Слід тільки розрізняти класи <span lang=EN-US>Histo </span>та <span
lang=EN-US>DiscretHisto. </span>Як приклад, у лістингу 3.9 наведено метод
доступу до гістограми для черги. </p>

<p class=a2>Лістинг 3.9 –  Метод відкладеного створення гістограми</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>          public
DiscretHisto getDiscretHistoQueue() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if (discretHistoQueue
== null) {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              discretHistoQueue
= new DiscretHisto();</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          }</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          return discretHistoQueue;</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>Завершується робота над класом моделі створенням методів
ініціалізації моделі для можливих режимів роботи. Ці методи налаштовують модель
до вимог конкретного режиму. </p>

<p class=MsoNormal>Так у методі initForTest() діаграмам передаються посилання
на об’єкти класу Painter, що забезпечує відображення цих черг на гістограмах. </p>

<p class=a2>Лістинг 3.10 –  Метод ініціалізації моделі у режимі тестування</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a1CxSpFirst><span style='font-size:13.0pt'>     public void
initForTest() {</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          // Передаємо
чергам painter-ів для динамічної індикації</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          getQueue().setPainter(gui.getDiagramQueue().getPainter());</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          //Налаштовуємо
можливість виведення протоколу на консоль</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          if
(gui.getJCheckBox().isSelected())</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              dispatcher.setProtocolFileName(&quot;Console&quot;);</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>          else</span></p>

<p class=a1CxSpMiddle><span style='font-size:13.0pt'>              dispatcher.setProtocolFileName(&quot;&quot;);</span></p>

<p class=a1CxSpLast><span style='font-size:13.0pt'>     }</span></p>

</div>

<p class=MsoNormal>У інших режимах виникає потреба реалізації методів відповідних
інтерфейсів. Якщо методи ініціалізації з цих інтерфейсів передають якісь
налаштування компонентам моделі, то ці налаштування доцільно передавати
компонентам через спеціально для цього створені методи. Перенесення цих
налаштувань до шару подання не зовсім коректне, бо компоненти їх можуть не
отримати.</p>

<p class=MsoNormal><span lang=RU>&nbsp;</span></p>

</div>

</body>

</html>
