<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-link:"Заголовок 1 Знак";
	margin-top:0cm;
	margin-right:36.85pt;
	margin-bottom:12.0pt;
	margin-left:56.95pt;
	text-align:center;
	text-indent:0cm;
	page-break-before:always;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	color:maroon;
	text-transform:uppercase;}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:112.1pt;
	text-indent:-1.0cm;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";}
h3
	{mso-style-link:"Заголовок 3 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:138.4pt;
	text-indent:-31.2pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";}
h4
	{mso-style-link:"Заголовок 4 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:139.15pt;
	text-indent:-45.35pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	font-style:italic;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-name:"Название объекта\,Подпись под рисунком";
	mso-style-link:"Название объекта Знак\,Подпись под рисунком Знак";
	margin-top:6.0pt;
	margin-right:36.85pt;
	margin-bottom:12.0pt;
	margin-left:36.85pt;
	text-align:center;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Основной текст Знак";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
span.1
	{mso-style-name:"Заголовок 1 Знак";
	mso-style-link:"Заголовок 1";
	font-family:"Arial","sans-serif";
	color:maroon;
	text-transform:uppercase;
	font-weight:bold;}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-link:"Заголовок 3";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.4
	{mso-style-name:"Заголовок 4 Знак";
	mso-style-link:"Заголовок 4";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
p.a, li.a, div.a
	{mso-style-name:СтильРисунка;
	mso-style-link:"СтильРисунка Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:center;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0, li.a0, div.a0
	{mso-style-name:"Стиль текста программ в рамке";
	margin-top:3.0pt;
	margin-right:0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpFirst, li.a0CxSpFirst, div.a0CxSpFirst
	{mso-style-name:"Стиль текста программ в рамкеCxSpFirst";
	margin-top:3.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpMiddle, li.a0CxSpMiddle, div.a0CxSpMiddle
	{mso-style-name:"Стиль текста программ в рамкеCxSpMiddle";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpLast, li.a0CxSpLast, div.a0CxSpLast
	{mso-style-name:"Стиль текста программ в рамкеCxSpLast";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a1, li.a1, div.a1
	{mso-style-name:"Стиль основного текста";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a2, li.a2, div.a2
	{mso-style-name:"Стиль для списка";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:2.0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-17.0pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a3, li.a3, div.a3
	{mso-style-name:"Стиль маркированого списка";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:86.2pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:-18.0pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a4, li.a4, div.a4
	{mso-style-name:Листинг;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
span.a5
	{mso-style-name:"Название объекта Знак\,Подпись под рисунком Знак";
	mso-style-link:"Название объекта\,Подпись под рисунком";
	font-family:"Times New Roman","serif";}
span.a6
	{mso-style-name:"СтильРисунка Знак";
	mso-style-link:СтильРисунка;
	font-family:"Times New Roman","serif";}
span.a7
	{mso-style-name:"Название Знак";
	mso-style-link:Название;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
span.a8
	{mso-style-name:"Основной текст Знак";
	mso-style-link:"Основной текст";
	font-family:"Times New Roman","serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=RU>

<div class=WordSection1>

<h3 style='margin-left:70.9pt;text-align:justify;text-indent:-34.05pt'><a
name="_Toc391820172"><span lang=UK>6.1.1 </span><span lang=UK>Опис проекту</span></a></h3>

<p class=MsoNormal><span lang=UK style='color:black'>У лабораторній роботі
досліджується проста марківська система масового  обслуговування. До складу
моделі входять генератор заявок, черга й обслуговуючий при</span><span
style='color:black'>лад</span><span lang=UK style='color:black'>. Система
проектувалася виходячи з того, що вона повинна забезпечити:</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>виведення діаграми зміни довжини черги у часі;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>накопичення, обробку й видачу (у вигляді гістограми
й  тексту) статистичної інформації про довжину черги;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>накопичення, обробку й видачу (у вигляді гістограми
й  тексту) статистичної інформації про час очікування заявок у черзі;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>забезпечувати на</span>лаштува<span lang=UK>ння
параметрів моделі - тривалість моделювання, максимальний розмір черги,
статистичні характеристики потоку заявок і часу обслуговування.</span></p>

<p class=MsoNormal><span lang=UK style='color:black'>Проект було реалізовано з
використання</span><span style='color:black'>м</span><span lang=UK
style='color:black'> технології проектування, що була розглянута у попередній
лабораторній роботі та у РГР.</span></p>

<h3 style='margin-left:70.9pt;text-align:justify;text-indent:-34.05pt'><a
name="_Toc391820173"><span lang=UK>6.1.2 </span><span lang=UK>Клас </span></a><span
lang=EN-US style='color:black'>t</span><span lang=UK style='color:black'>est</span><span
style='color:black'>Theory.</span><span lang=UK style='color:black'>Theory</span><span
lang=EN-US>GUI</span></h3>

<p class=MsoNormal><span lang=UK style='color:black'>Клас </span><span
lang=EN-US style='color:black'>t</span><span lang=UK style='color:black'>estTheory.</span><span
lang=EN-US style='color:black'>TheoryGUI</span><span lang=UK style='color:black'>  
реалізує візуальну частину застосування, що оформлена</span><span
style='color:black'> так само, як </span><span lang=UK style='color:black'>і
попередньому проекті. </span></p>

<p class=MsoNormal><span lang=UK style='color:black'>Ліва панель інтерфейсу
користувача, яку видно на рисунку&nbsp;6.2, забезпечує налаштування моделі.
Праворуч розташовано компонент </span><span lang=EN-US style='color:black'>TabbedPane</span><span
lang=UK style='color:black'>,</span><span lang=UK style='color:black'> </span><span
lang=UK style='color:black'>який містить дві закладки. Перша закладка
забезпечує запуск моделі у режимі тестування з динамічною індикацію довжини
черги. </span></p>

<p class=a><img width=607 height=325 id="Рисунок 5"
src="project5.files/image001.png"></p>

<p class=MsoCaption style='margin-top:6.0pt;margin-right:13.9pt;margin-bottom:
12.0pt;margin-left:0cm'><span lang=UK>Рисунок </span><span
lang=UK>6</span><span lang=UK>.</span>2<span lang=UK> – Вигляд першої сторінки
проекту</span></p>

<p class=MsoNormal><span lang=UK style='color:black'>Запуск моделі відбувається
при натисканні кнопки «Старт».</span></p>

<p class=MsoNormal><span lang=UK style='color:black'>Структура моделі та її
запуск у режимі тестування нічим не відрізняється від запуску моделі у
попередніх лабораторних роботах.</span></p>

<p class=MsoNormal><span lang=UK style='color:black'>Друга закладка
використовується для запуску моделі у режимі накопичення та відображення
статистичної інформації. Зовнішній вигляд візуальної частини проекту для цього
режиму наведено на рисунку 6.3.</span></p>

<p class=a1><span lang=UK style='color:black'>На закладці розташований
компонент класу </span><span lang=EN-US style='color:black'>widjets.stat.StatisticsManager
</span><span lang=UK style='color:black'>фреймворку</span><span lang=EN-US
style='color:black'> Simulation</span><span lang=UK style='color:black'>. </span><span
lang=UK>Цей компонент забезпечує запуск моделі у режимі отримання статистичних
даних та відображає отримані статистичні дані. </span></p>

<p class=a1><span lang=UK>Для того щоб компонент запрацював, йому потрібно
передати посилання  на фабрику моделей через метод </span><span lang=EN-US>setFactory(IModelFactory).
</span><span lang=UK>У класі, що розглядається, це зроблено за допомогою лямбда
функції:</span></p>

<p class=a1><span lang=UK>statisticsManager.setFactory((d)-&gt; new Model(d,
this));</span></p>

<p class=a><img width=557 height=378 id="Рисунок 4"
src="project5.files/image002.png"></p>

<p class=MsoCaption style='margin-top:6.0pt;margin-right:13.9pt;margin-bottom:
12.0pt;margin-left:0cm'><span lang=UK>Рисунок </span><span
lang=UK>6</span><span lang=UK>.</span>3<span lang=UK> – Вигляд другої сторінки
проекту</span></p>

<p class=a1><span lang=UK>Компонент вимагає, окрім того, щоб модель реалізувала
інтерфейс </span><span lang=EN-US>IStatisticsable,</span><span lang=UK> який
буде розглянутий у наступному пункті.</span></p>

<p class=a1><span lang=EN-US>&nbsp;</span></p>

<h3 style='margin-left:70.9pt;text-indent:-34.05pt'><a name="_Toc391820174"><span
lang=UK style='color:black'>6.1.3 </span><span lang=UK style='color:black'>Модель
досліджуваної системи</span></a></h3>

<p class=MsoNormal><span lang=UK style='color:black'>Модель досліджуваної
системи</span><span lang=UK> об’єднує усі компоненти моделі, що забезпечують її
роботу та накопичення статистичної інформації. Модель складається з наступних
об'єктів: </span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>генератор заявок - об'єкт </span><span lang=EN-US>t</span><span
lang=UK>ransactGenerator, екземпляр створеного у проекті класу
TransactGenerator;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>черга заявок на обслуговування - об'єкт queue,
екземпляр класу QueueForTransactions;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>обслуговуючий прилад - об'єкт </span><span
lang=EN-US>d</span><span lang=UK>evice, екземпляр створеного у проекті класу
Device.</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>гістограма для збору інформації про довжину черги -
об'єкт discretHisto, екземпляр класу stat.DiscretHisto;.</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>гістограма для збору інформації про час очікування
в черзі - об'єкт histoTransactionWaitInQueue, екземпляр класу stat.Histo;</span></p>

<p class=a2 style='margin-left:0cm;text-indent:39.7pt'><span lang=UK
style='font-family:Symbol'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><span lang=UK>гістограма для збору інформації про час чекання для</span><span
lang=UK> </span><span lang=UK>обслуговуючого пристрою</span><span lang=UK> </span><span
lang=UK> - об'єкт histoWaitDevice, екземпляр класу stat.Histo.</span></p>

<p class=a2 style='margin-left:39.7pt;text-indent:0cm'><span lang=UK>&nbsp;</span></p>

<p class=a1><span lang=UK>Модель реалізує інтерфейс </span><span lang=EN-US>IStatisticsable</span><span
lang=UK> який передбачає реалізацію двох методів.</span></p>

<p class=a1><span lang=UK>Метод </span><span lang=EN-US>void
initForStatistics() </span><span lang=UK>дозволяє виконати підготовчі дії перед
початком роботи моделі, якщо це потрібно, і у класі, що тут розглядається,
залишається пустим.</span></p>

<p class=a1><span lang=UK>Метод </span><span lang=EN-US>Map&lt;String,
IHisto&gt; getStatistics() </span><span lang=UK>спрацьовує після завершення
роботи моделі і повертає колекцію типу Мар, в якої кожен елемент у якості ключа
містить текст, що ідентифікує статистичні дані, а значенням має гістограму, що
містить ці дані.</span></p>

<p class=a1><span lang=UK>Реалізацію усіх методів моделі наведено у лістингу 6.1.</span></p>

<p class=MsoNormal><span lang=UK>Перелік публічних методів моделі, що утворюють
її інтерфейс наведено на рисунку 6.</span>4<span lang=UK>.</span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:0cm'><img
width=417 height=292 id="Рисунок 3" src="project5.files/image003.jpg"></p>

<p class=MsoCaption style='margin-left:27.0pt'><span lang=UK>Рисунок 6.4 – Публічний
інтерфейс моделі</span></p>

<p class=MsoNormal><span lang=UK>Клас модель побудовано виходячи з того, що
модель буде створюватися перед кожним її запуском. Це значно спрощує
програмування і підвищує його надійність, тому що при цьому усі компоненти
моделі теж створюються заново і не потребують ініціалізації.</span></p>

<p class=MsoNormal><span lang=UK>Для створення моделі використовується
конструктор з двома параметрами, який забезпечує гарантовану передачу моделі
посилань на візуальну частину і диспетчера. Конструктор наведено у лістингу 6.</span>1<span
lang=UK>.</span></p>

<p class=MsoNormal><span lang=UK>Конструктор забезпечує також передачу акторів
моделі до стартового списку диспетчера, використовуючи приватний метод
componentsToStartList(). залежіть від конкретного завдання. Для звертання до
акторів використовуються методи get…(), у яких реалізовано відкладене створення
відповідних об’єктів</span></p>

<p class=MsoNormal><span lang=UK>Для створення усіх акторів використовується
однаковий підхід, що полягає у використанні конструктора з параметрами, які
передають посилання на візуальну частину та на модель. Маючи ці посилання,
створений об’єкт отримує доступ до інформації, що потрібна йому для
функціонування.</span></p>

<p class=MsoNormal><span lang=UK>Черга класу </span><span lang=EN-US>QueueForTransactions</span><span
lang=EN-US> </span><span lang=UK>створюється також з використанням конструктора
з параметрами. </span></p>

<p class=MsoNormal><span lang=UK>Аналогічно створюються об’єкти для гістограм.</span></p>

<p class=a4><span lang=UK>Лістинг 6.1. –  Клас моделі</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a0CxSpFirst><span lang=EN-US>public class Model implements
IStatisticsable {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Посилання на диспетчера</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private Dispatcher dispatcher;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Посилання на візуальну частину</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private TheoryGUI gui;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Генератор транзакцій</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private TransactGenerator
transactGenerator = null;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Черга транзакцій</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private
QueueForTransactions&lt;Double&gt; queue = null;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Обслуговуючий прилад</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private Device device = null;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Гістограма для довжини черги</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private DiscretHisto discretHisto;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Гістограма для часу перебування у
черзі</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private Histo
histoTransactionWaitInQueue;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Гістограма для часу чекання
Device</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private Histo histoWaitDevice;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    //
////////////////////////////////////////</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Єдиний спосіб створити модель, це
викликати цей конструктор</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Він гарантовано передає посилання
на диспетчера та TransGUI</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    //
////////////////////////////////////////</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public Model(Dispatcher d, TheoryGUI
g) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (d == null || g == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           System.out.println(&quot;Не
визначено диспетчера або TransGUI для BuldModel&quot;);</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           System.out.println(&quot;Подальша
робота неможлива&quot;);</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           System.exit(0);</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        dispatcher = d;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        gui = g;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        // Передаємо акторів до
стартового списку диспетчера</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        componentsToStartList();</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    private void componentsToStartList()
{</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        dispatcher.addStartingActor(getTransactGenerator());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        dispatcher.addStartingActor(getDevice());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public TransactGenerator
getTransactGenerator() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (transactGenerator == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           transactGenerator = new
TransactGenerator(&quot;TransactGenerator&quot;,gui,this);</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return transactGenerator;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public QueueForTransactions&lt;Double&gt;
getQueue() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (queue == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           queue = new
QueueForTransactions&lt;&gt;(&quot;Queue&quot;, dispatcher,</span><span
lang=EN-US> </span></p>

<p class=a0CxSpMiddle><span lang=UK>                                      </span><span
lang=EN-US>getDiscretHisto(), gui.getChooseDataQmaxSize().getInt());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return queue;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public Device getDevice() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (device == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           device = new
Device(&quot;Device&quot;,gui,this);</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return device;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public DiscretHisto
getDiscretHisto() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (discretHisto == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           discretHisto = new
DiscretHisto();</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return discretHisto;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public Histo
getHistoTransactionWaitInQueue() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (histoTransactionWaitInQueue
== null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           histoTransactionWaitInQueue =
new Histo();</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return
histoTransactionWaitInQueue;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public Histo getHistoWaitDevice() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        if (histoWaitDevice == null) {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>           histoWaitDevice = new
Histo();</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return histoWaitDevice;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public void initForTest() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        getQueue().setPainter(gui.getDiagramQueueSize().getPainter());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    // Реалізація інтерфейсу
IStatisticsable</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    @Override</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public void initForStatistics() {</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>               </span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    @Override</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    public Map&lt;String, IHisto&gt; getStatistics()
{</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        Map&lt;String, IHisto&gt; map =
new HashMap&lt;&gt;();</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        map.put(&quot;Гістограма для
довжини черги&quot;, getDiscretHisto());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        map.put(&quot;Гістограма для
часу чекання у черзі&quot;, </span></p>

<p class=a0CxSpMiddle><span lang=EN-US>                                                                  getHistoTransactionWaitInQueue());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        map.put(&quot;Гістограма для
часу простою обслуговуючого пристрою&quot;, </span></p>

<p class=a0CxSpMiddle><span lang=EN-US>                                                                  getDevice().getWaitingTimeHisto());</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        return map;</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>    }</span></p>

<p class=a0CxSpLast><span lang=EN-US>}  </span></p>

</div>

<h3 style='margin-left:70.9pt;text-indent:-34.05pt'><a name="_Toc391820175"><span
lang=UK>6.1.4 </span><span lang=UK>Класи акторів</span></a></h3>

<h4 style='margin-left:80.4pt;text-indent:-43.55pt'><a name="_Toc391820176"><span
lang=UK style='font-family:"Times New Roman","serif";font-weight:normal;
font-style:normal'>6.1.4.1 </span><span lang=UK style='font-weight:normal;
font-style:normal'>Клас theorStudy.TransactGenerator</span></a><span lang=UK
style='font-weight:normal;font-style:normal'> </span></h4>

<p class=MsoNormal><span lang=UK style='color:black'>Цей клас призначений для
створення об'єктів, які генерують заявки. Об’єкт цього класу затримується на
випадковий час, потім створює заявку і ставить її у чергу на обслуговування.
Заявка створюється у вигляді числа, значення якого дорівнює поточному значенню
часу моделювання, тобто часу появи заявки. Це дозволить обслуговуючому приладу
визначити, </span><span style='color:black'>як </span><span lang=UK
style='color:black'>довго заявка чекала</span><span style='color:black'> на </span><span
lang=UK style='color:black'>обслуговування. </span></p>

<p class=MsoNormal><span lang=UK> Діаграма діяльності об’єктів класу
представлена на рисунку&nbsp;</span>6<span lang=UK>.5.</span></p>

<p class=a><img width=321 height=319 id="Рисунок 2"
src="project5.files/image004.jpg"></p>

<p class=MsoCaption style='margin-top:6.0pt;margin-right:13.9pt;margin-bottom:
12.0pt;margin-left:0cm'><span lang=UK>Рисунок </span><span
lang=UK>6</span><span lang=UK>.5 – Діаграма діяльності генератора заявок</span></p>

<p class=MsoNormal><span lang=UK>Текст класу </span><span lang=EN-US>teorStudy</span><span
lang=UK>.</span><span lang=EN-US>TransactGenerator</span><span lang=EN-US> </span><span
lang=UK>наведено нижче, у лістингу 6.2.</span></p>

<p class=a4><span lang=UK>Лістинг 6.2. – Клас </span>генератора заявок</p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a0CxSpFirst><span lang=UK>public class TransactGenerator extends Actor
{</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Черга для тразакцій</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private
QueueForTransactions&lt;Double&gt; queue;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Генератор часу, що витрачається на
створення транзакції</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private Randomable rndGen;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Час роботи генератора</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private double finishTime;</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Конструктор</span></p>

<p class=a0CxSpMiddle><span lang=UK>    public TransactGenerator(String name,
TheoryGUI gui, Model model) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           setNameForProtocol(name);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           finishTime =
gui.getChooseDataFinishTime().getDouble();</span></p>

<p class=a0CxSpMiddle><span lang=UK>           rndGen =
gui.getChooseRandomGen();</span></p>

<p class=a0CxSpMiddle><span lang=UK>           queue = model.getQueue();   </span></p>

<p class=a0CxSpMiddle><span lang=UK>    }</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Правила дії</span></p>

<p class=a0CxSpMiddle><span lang=UK>    public void rule() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        while
(getDispatcher().getCurrentTime() &lt;= finishTime) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           holdForTime(rndGen.next());</span></p>

<p class=a0CxSpMiddle><span lang=UK>           getDispatcher().printToProtocol(&quot; 
&quot;  + getNameForProtocol() +</span></p>

<p class=a0CxSpMiddle><span lang=UK>                                                                   &quot;
створює транзакцію.&quot;);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           //Ставимо у чергу час створення
транзакції</span></p>

<p class=a0CxSpMiddle><span lang=UK>           queue.addLast(getDispatcher().getCurrentTime());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        }</span></p>

<p class=a0CxSpMiddle><span lang=UK>    }</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpLast><span lang=UK>}</span></p>

</div>

<h4 style='margin-left:80.4pt;text-indent:0cm'><span lang=UK style='font-weight:
normal;font-style:normal'> <a name="_Toc391820177"></a></span></h4>

<h4 style='margin-left:80.4pt;text-indent:-43.55pt'><span lang=UK
style='font-family:"Times New Roman","serif";font-weight:normal;font-style:
normal'>6.1.4.2 </span><span lang=UK style='font-weight:normal;font-style:normal'>Клас
</span><span lang=EN-US style='font-weight:normal;font-style:normal'>t</span><span
lang=UK style='font-weight:normal;font-style:normal'>heorStudy</span><span
lang=EN-US style='font-weight:normal;font-style:normal'>.</span><span lang=UK
style='font-weight:normal;font-style:normal'>Devices</span></h4>

<p class=MsoNormal><span lang=UK>Даний <span style='color:black'>клас моделює
роботу обслуговуючого  приладу системи.</span></span><span lang=UK
style='color:black'> </span><span lang=UK style='color:black'>Об’єкт</span><span
lang=UK style='color:black'> </span><span lang=UK style='color:black'>цього
класу чекає, поки у черзі з’явиться заявка, вилучає її з черги і після цього
затримується на деякий час, імітуючи процес обробки. Окрім того, цей обєкт
забезпечує обчислення й реєстрацію у гістограмі часу очікування у черзі для
кожної заявки</span><span lang=UK>.  </span></p>

<p class=MsoNormal><span lang=UK>Діаграма діяльності об’єкту класу <span
style='color:black'>theorStudy.Devices</span> представлена на рисунку 6.6, а
код класу наведено у лістингу 6.3.</span></p>

<p class=a><img width=423 height=392 id="Рисунок 1"
src="project5.files/image005.jpg"></p>

<p class=MsoCaption style='margin-top:6.0pt;margin-right:13.9pt;margin-bottom:
12.0pt;margin-left:0cm'><span lang=UK>Рисунок </span><span
lang=UK>6</span><span lang=UK>.6 – Діаграма діяльності обслуговуючого пристрою</span></p>

<p class=MsoNormal><span lang=UK>.</span></p>

<p class=a4><span lang=UK>Лістинг 6.3. – Клас обслуговуючого пристрою</span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a0CxSpFirst><span lang=UK>public class Device extends Actor {</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Черга для тразакцій</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private QueueForTransactions&lt;Double&gt;
queue;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Час роботи генератора</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private double finishTime;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Генератор часу, що витрачає прилад
на обслуговування транзакції</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private Randomable rndDev;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Гістограма для часу перебування
транзакції у черзі</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private Histo histoTransactionWaitInQueue;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Умова, виконання якої буде чекати
Device</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private BooleanSupplier queueSize;</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Конструктор,  у якому
ініціалізуються усі поля класу</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // через доступ до моделі та візуальної
частини</span></p>

<p class=a0CxSpMiddle><span lang=UK>    public Device(String name, TheoryGUI
gui, Model model) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        setNameForProtocol(name);</span></p>

<p class=a0CxSpMiddle><span lang=UK>        setHistoForActorWaitingTime(model.getHistoWaitDevice());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        finishTime =
gui.getChooseDataFinishTime().getDouble();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        rndDev = gui.getChooseRandomDev();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        histoTransactionWaitInQueue =
model.getHistoTransactionWaitInQueue();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        queue = model.getQueue();</span></p>

<p class=a0CxSpMiddle><span lang=UK>    }</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    // Метод ініціалізації умов</span></p>

<p class=a0CxSpMiddle><span lang=UK>    private void initConditions() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        // Створюємо умову, виконання якої
буде чекати актор</span></p>

<p class=a0CxSpMiddle><span lang=UK>        queueSize = () -&gt; queue.size()
&gt; 0;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    }</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>    public void rule() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        initConditions();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        // цикл виконання правил дії</span></p>

<p class=a0CxSpMiddle><span lang=UK>        while (getDispatcher().getCurrentTime()
&lt;= finishTime) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           try {</span></p>

<p class=a0CxSpMiddle><span lang=UK>               waitForCondition(queueSize,</span></p>

<p class=a0CxSpMiddle><span lang=UK>                       &quot;поки у &quot;
+ queue.getNameForProtocol()</span></p>

<p class=a0CxSpMiddle><span lang=UK>                            + &quot;
з'явиться транзакція&quot;);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           } catch
(DispatcherFinishException e) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>               return;</span></p>

<p class=a0CxSpMiddle><span lang=UK>           }</span></p>

<p class=a0CxSpMiddle><span lang=UK>           double waitTime =
getDispatcher().getCurrentTime()</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   - (double)
queue.removeFirst();</span></p>

<p class=a0CxSpMiddle><span lang=UK>           histoTransactionWaitInQueue.add(waitTime);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           holdForTime(rndDev.next());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        }</span></p>

<p class=a0CxSpMiddle><span lang=UK>    }</span></p>

<p class=a0CxSpLast><span lang=UK>}</span></p>

</div>

<p class=MsoNormal><span lang=UK>&nbsp;</span></p>

</div>

</body>

</html>
