<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
h1
	{mso-style-name:"Заголовок 1\,Знак";
	mso-style-link:"Заголовок 1 Знак";
	margin-top:0cm;
	margin-right:36.85pt;
	margin-bottom:12.0pt;
	margin-left:56.95pt;
	text-align:center;
	text-indent:0cm;
	page-break-before:always;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	color:maroon;
	text-transform:uppercase;}
h2
	{mso-style-link:"Заголовок 2 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:112.1pt;
	text-indent:-1.0cm;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";}
h3
	{mso-style-link:"Заголовок 3 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:138.4pt;
	text-indent:-31.2pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";}
h4
	{mso-style-link:"Заголовок 4 Знак";
	margin-top:12.0pt;
	margin-right:39.7pt;
	margin-bottom:3.0pt;
	margin-left:139.15pt;
	text-indent:-45.35pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial","sans-serif";
	font-style:italic;}
p.MsoCaption, li.MsoCaption, div.MsoCaption
	{mso-style-name:"Название объекта\,Подпись под рисунком";
	mso-style-link:"Название объекта Знак\,Подпись под рисунком Знак";
	margin-top:6.0pt;
	margin-right:36.85pt;
	margin-bottom:12.0pt;
	margin-left:36.85pt;
	text-align:center;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Название Знак";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:28.0pt;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{mso-style-link:"Основной текст Знак";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0cm;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:36.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
span.1
	{mso-style-name:"Заголовок 1 Знак";
	mso-style-link:"Заголовок 1\,Знак";
	font-family:"Arial","sans-serif";
	color:maroon;
	text-transform:uppercase;
	font-weight:bold;}
span.2
	{mso-style-name:"Заголовок 2 Знак";
	mso-style-link:"Заголовок 2";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.3
	{mso-style-name:"Заголовок 3 Знак";
	mso-style-link:"Заголовок 3";
	font-family:"Arial","sans-serif";
	font-weight:bold;}
span.4
	{mso-style-name:"Заголовок 4 Знак";
	mso-style-link:"Заголовок 4";
	font-family:"Arial","sans-serif";
	font-weight:bold;
	font-style:italic;}
p.a, li.a, div.a
	{mso-style-name:СтильРисунка;
	mso-style-link:"СтильРисунка Знак";
	margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:0cm;
	text-align:center;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0, li.a0, div.a0
	{mso-style-name:"Стиль текста программ в рамке";
	margin-top:3.0pt;
	margin-right:0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpFirst, li.a0CxSpFirst, div.a0CxSpFirst
	{mso-style-name:"Стиль текста программ в рамкеCxSpFirst";
	margin-top:3.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpMiddle, li.a0CxSpMiddle, div.a0CxSpMiddle
	{mso-style-name:"Стиль текста программ в рамкеCxSpMiddle";
	margin:0cm;
	margin-bottom:.0001pt;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a0CxSpLast, li.a0CxSpLast, div.a0CxSpLast
	{mso-style-name:"Стиль текста программ в рамкеCxSpLast";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	border:none;
	padding:0cm;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
p.a1, li.a1, div.a1
	{mso-style-name:"Стиль основного текста";
	margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-indent:36.85pt;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
span.a2
	{mso-style-name:"Стиль основного текста Знак";
	font-family:"MS Mincho";}
p.a3, li.a3, div.a3
	{mso-style-name:Листинг;
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Times New Roman","serif";}
span.a4
	{mso-style-name:"Название объекта Знак\,Подпись под рисунком Знак";
	mso-style-link:"Название объекта\,Подпись под рисунком";
	font-family:"Times New Roman","serif";}
span.a5
	{mso-style-name:"СтильРисунка Знак";
	mso-style-link:СтильРисунка;
	font-family:"Times New Roman","serif";}
span.a6
	{mso-style-name:"Название Знак";
	mso-style-link:Название;
	font-family:"Calibri Light","sans-serif";
	letter-spacing:-.5pt;}
span.a7
	{mso-style-name:"Основной текст Знак";
	mso-style-link:"Основной текст";
	font-family:"Times New Roman","serif";}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:107%;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:2.0cm 42.5pt 2.0cm 3.0cm;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=RU>

<div class=WordSection1>


<h2 style='margin-left:64.35pt'><span lang=EN-US>8.1  </span><span lang=UK>Засоби
для дослідження перехідних процесів</span></h2>

<p class=a1><span lang=UK>Класи та інтерфейси, які можуть бути використані під
час дослідження перехідних процесів у різних моделях, в тому числі й під час
курсового проектування, знаходяться у пакеті </span><span lang=EN-US>widgets</span><span
lang=UK>.</span><span lang=EN-US>trans</span><span lang=EN-US> </span><span
lang=UK>бібліотеки </span><span lang=EN-US>Simulation</span><span lang=UK>.</span></p>

<h3 style='margin-left:68.05pt'><a name="_Toc392242395"></a><a
name="_Toc390801285"><span lang=UK>8.1.1 </span><span lang=UK>Компонент TransProcessManager</span></a></h3>

<p class=a1><span lang=UK>Цей компонент забезпечує дослідження перехідних
процесів</span><span lang=UK> </span><span lang=UK>у чергах. Зовнішній вигляд
компоненту наведено на рисунку</span><span lang=EN-US>&nbsp;8.3.</span><span
lang=EN-US> </span></p>

<p class=a1><span lang=UK>Інформація про перехідний процес формується шляхом
усереднення розміру черг за часом та по реалізаціям для великої кількості
паралельно працюючих моделей.</span></p>

<p class=a1><span lang=EN-US>&nbsp;</span></p>

<p class=a><img width=499 height=240 id="Рисунок 1"
src="Components.files/image001.jpg"></p>

<p class=MsoCaption style='margin-right:0cm'><span lang=UK>Рисунок </span><span
lang=EN-US>8</span><span lang=UK>.</span><span lang=EN-US>3</span><span
lang=UK> – Вигляд компоненту класу </span><span lang=EN-US>TransProcessManager</span></p>

<p class=MsoNormal style='text-indent:37.4pt'><span lang=UK>Так само як у
випадку компоненту </span><span lang=EN-US>ExperimentManager </span><span
lang=UK>тут використовується технологія, відповідно до якої моделі створюються,
ініціалізуються та запускаються самим компонентом. </span></p>

<p class=MsoNormal style='text-indent:37.4pt'><span lang=UK>Необхідною умовою
для роботи компонента є передача йому посилання на фабрику моделей, що реалізує
інтерфейс </span><span lang=EN-US>IModelFactory</span><span lang=UK>. Зв’язок
компонента </span><span lang=EN-US>ExperimentManager</span><span lang=UK> з
фабрикою моделей налаштовується через метод </span><span lang=EN-US>setFactory</span><span
lang=UK>(</span><span lang=EN-US>IModelFactory</span><span lang=UK>).</span></p>

<p class=MsoNormal><span lang=UK>Створивши модель, компонент </span><span
lang=EN-US>TransProcessManager</span><span lang=UK> приводить її до типу   </span><span
lang=EN-US>widgets</span><span lang=UK>.</span><span lang=EN-US>trans</span><span
lang=UK>.ITransProcesable</span><span lang=EN-US>. </span><span lang=UK>Це
інтерфейс, через який компонент </span><span lang=EN-US>TransProcessManager</span><span
lang=UK> буде працювати з моделлю і модель має реалізовувати такий інтерфейс. </span><span
lang=EN-US>I</span><span lang=UK>нтерфейс ITransProcesable передбачає реалізацію
трьох методів.</span></p>

<p class=a1><span lang=UK style='color:black'>Метод </span><span lang=EN-US
style='color:black'>void </span><span lang=EN-US style='background:white'>initForTrans</span><span
lang=UK style='background:white'>(double finishTime)</span><span lang=UK>
використовується для ініціалізації компонентів моделі. Як параметр до методу
передається <span style='color:black'>тривалість моделювання. </span></span></p>

<p class=MsoNormal><span lang=UK>Метод </span><span lang=EN-US>void </span><span
lang=UK>resetAccum() повинен забезпечувати ініціалізацію <span
style='color:black'>накопичувача </span>інформації про середню довжину черги в
моделі.</span></p>

<p class=MsoNormal><span lang=UK>Метод Map&lt;String, Double&gt;
getTransResult()</span><span lang=UK> </span><span lang=UK>забезпечує
повернення результату накопичення інформації. </span></p>

<p class=MsoNormal><span lang=UK>Кожен елемент колекції, що повертає цей метод,
в якості ключа містить текст, що ідентифікує чергу, а значенням є сам
результат. Таким чином метод може повертати інформацію про будь яку кількість
черг. </span></p>

<p class=MsoNormal><span lang=UK>На підставі переліку ключових значень
елементів отриманої колекції результатів створюється модель для компоненту </span><span
lang=EN-US>JComboBox</span><span lang=UK>, який дозволяє викликати для
перегляду потрібний перехідний процес.</span></p>

<p class=a1><span lang=UK style='color:black'>Візуальна частина компоненту,</span><span
lang=UK style='color:black'> </span><span lang=UK style='color:black'>що була
показана на рисунку </span><span lang=EN-US style='color:black'>8</span><span
lang=UK style='color:black'>.</span><span lang=EN-US style='color:black'>3</span><span
lang=UK style='color:black'>, забезпечує його налаштування, а також запуск
процесу моделювання.</span></p>

<p class=a1><span lang=UK style='color:black'>Поле “Інтервал усереднення”
визначає довжину інтервалу накопичення інформації. </span></p>

<p class=a1><span lang=UK style='color:black'>Поле “Кількість інтервалів”
визначає кількість інтервалів накопичення. </span></p>

<p class=a1><span lang=UK style='color:black'>У полі “Паралельно моделей”
задається кількість паралельно працюючих систем.</span></p>

<p class=a1><span lang=UK style='color:black'>Крім візуальної частини до складу
компонента входять поля, які містять посилання  на такі об'єкти:</span></p>

<p class=a1><span lang=EN-US style='color:black'>monitor</span><span lang=UK
style='color:black'> – монітор, об’єкт класу </span><span lang=UK>TransMonitor,
<span style='color:black'>що наслідує клас Actor, і в ньому визначений метод
rule(), де описано правила дії, що забезпечують  проведення експерименту.</span>
Об’єкт створюється у компоненті.</span></p>

<p class=a1><span lang=EN-US>factory</span><span lang=UK> – посилання на
фабрику моделей, що реалізує інтерфейс </span><span lang=EN-US>IModelFactory</span><span
lang=UK>, за допомогою якої будуть створюватися моделі.</span></p>

<p class=a1><span lang=EN-US style='color:black'>diagram</span><span lang=UK
style='color:black'> – </span><span lang=UK>посилання на <span
style='color:black'>компонент класу </span></span><span lang=EN-US
style='color:black'>Diagram</span><span lang=UK style='color:black'>, що
забезпечує відображення результатів моделювання і регресійного аналізу
отриманих даних.</span></p>

<p class=a1><span lang=EN-US style='color:black'>dispatcher</span><span
lang=UK style='color:black'> – </span><span lang=UK>посилання на <span
style='color:black'>об’єкт класу </span></span><span lang=EN-US
style='color:black'>Dispatcher</span><span lang=UK style='color:black'>, що
забезпечує взаємодію у часі монітора та моделей.</span></p>

<p class=a1><span lang=UK>Для запуску процесу моделювання використовується
кнопка «Старт», з якою пов'язаний метод startMonitoring(), лістинг 8.1.
Завдання цього методу налаштувати діаграму, створити монітор і передати йому параметри
експерименту та посилання на фабрику моделей</span>,<span lang=UK> а після
цього передати монітор диспетчеру та запустити процес моделювання, викликавши
метод диспетчера </span><span lang=EN-US>start</span>()<span lang=UK>.</span></p>

<p class=a3><span lang=UK>Лістинг 8.1 -  Текст методу   для запуску процесу
моделювання </span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a0CxSpFirst><span lang=UK>    private void startMonitoring() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        getJButtonStart().setEnabled(false);</span></p>

<p class=a0CxSpMiddle><span lang=UK>        diagram.setHorizontalMaxText(String.valueOf((int)
getFinishTime()));</span></p>

<p class=a0CxSpMiddle><span lang=UK>        diagram.setGridByX(getNIntervals());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        diagram.clear();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor = new TransMonitor();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setNameForProtocol(&quot;Monitor&quot;);</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setDiagram(getDiagram());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setComboBox(getComboBox());</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setNParallel(getNParallel());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setNIntervals(getNIntervals());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setInterval(getInterval());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        monitor.setFactory(getFactory());</span></p>

<p class=a0CxSpMiddle><span lang=UK>&nbsp;</span></p>

<p class=a0CxSpMiddle><span lang=UK>        getDispatcher().addStartingActor(getMonitor());</span></p>

<p class=a0CxSpMiddle><span lang=UK>        getDispatcher().start();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        //Створення потоку, що розблокує
кнопку «Старт»</span></p>

<p class=a0CxSpMiddle><span lang=UK>        new Thread() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           public void run() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>               try {</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   dispatcher.getThread().join();</span></p>

<p class=a0CxSpMiddle><span lang=UK>               } catch
(InterruptedException e) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   e.printStackTrace();</span></p>

<p class=a0CxSpMiddle><span lang=UK>               }</span></p>

<p class=a0CxSpMiddle><span lang=UK>               getJButtonStart().setEnabled(true);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           };</span></p>

<p class=a0CxSpMiddle><span lang=UK>        }.start();</span></p>

<p class=a0CxSpLast><span lang=UK>}</span></p>

</div>

<h4 style='margin-left:80.4pt;text-indent:-43.55pt'><a name="_Toc392242396"><span
lang=UK style='font-family:"Times New Roman","serif";font-weight:normal;
font-style:normal'>8.1.1.1 </span><span lang=UK style='font-weight:normal;
font-style:normal'>Клас TransMonitor</span></a></h4>

<p class=MsoNormal><span class=a2><span style='font-family:"Times New Roman","serif";
color:black'>Об’єкт цього класу використовується для проведення експериментів
по виявленню закономірностей перехідного процесу в досліджуваній моделі.
Об’єкт, за допомогою фабрики, створює необхідну кількість копій моделі і
викликаєє, через задані проміжки часу, отримує від моделей статистичну
інформацію про досліджуваний параметр. Отримані дані накопичуються, а потім
можуть бути передані на обробку. Крім того, ці дані в процесі роботи компонента
можуть візуалізуватися</span></span><span lang=UK style='color:black'>.</span></p>

<p class=a1><span lang=UK>Клас TransMonitor<span style='color:black'> наслідує
клас Actor, і в ньому визначений метод rule(), який описує правила дії його
об'єктів, що забезпечують реалізацію функцій по проведенню експерименту.</span>
</span></p>

<p class=a1><span lang=UK style='color:black'>Текст методу rule() наводиться в
лістингу 8.</span><span lang=EN-US style='color:black'>2</span><span lang=UK
style='color:black'>.</span></p>

<p class=a3><span lang=UK>Лістинг 8.</span><span lang=EN-US>2</span><span
lang=UK> -  Правила дії об’єкту </span>monitor<span lang=UK> </span></p>

<div style='border:solid windowtext 1.0pt;padding:1.0pt 4.0pt 1.0pt 4.0pt'>

<p class=a0CxSpFirst><span lang=UK>    public void rule() {</span></p>

<p class=a0CxSpMiddle><span lang=UK>        // Масив для моделей</span></p>

<p class=a0CxSpMiddle><span lang=UK>        ITransProcesable[] modelArray = new
ITransProcesable[nParallel];</span></p>

<p class=a0CxSpMiddle><span lang=UK>        for (int i = 0; i &lt; nParallel;
i++) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           // Створюємо моделі і готуємо їх
до старту</span></p>

<p class=a0CxSpMiddle><span lang=UK>           modelArray[i] =
(ITransProcesable) (getFactory()</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   .createModel(getDispatcher()));</span></p>

<p class=a0CxSpMiddle><span lang=UK>           modelArray[i].initForTrans(interval
* nIntervals);</span></p>

<p class=a0CxSpMiddle><span lang=UK>        }</span></p>

<p class=a0CxSpMiddle><span lang=UK>        </span></p>

<p class=a0CxSpMiddle><span lang=UK>        // Готуємося до моніторингу моделей</span></p>

<p class=a0CxSpMiddle><span lang=UK>        intervalAverageArray = new
HashMap[nIntervals];</span></p>

<p class=a0CxSpMiddle><span lang=UK>        //Готуємо модель для комбобокс</span></p>

<p class=a0CxSpMiddle><span lang=UK>        Map&lt;String, Double&gt; resMap
=modelArray[0].getTransResult();</span></p>

<p class=a0CxSpMiddle><span lang=UK>        String[] keyStrings = (String[])
resMap.keySet().toArray(</span></p>

<p class=a0CxSpMiddle><span lang=UK>               new
String[resMap.keySet().size()]);</span></p>

<p class=a0CxSpMiddle><span lang=UK>        comboBox.setModel(new
DefaultComboBoxModel&lt;String&gt;(keyStrings));</span></p>

<p class=a0CxSpMiddle><span lang=UK>        // Цикл по інтервалам усреднення</span></p>

<p class=a0CxSpMiddle><span lang=UK>        for (int i = 0; i &lt; nIntervals;
i++) {</span></p>

<p class=a0CxSpMiddle><span lang=UK>           //Карта середніх значень для
інтервалу</span></p>

<p class=a0CxSpMiddle><span lang=UK>           Map&lt;String, Double&gt;
averageMap = new HashMap&lt;&gt;();</span></p>

<p class=a0CxSpMiddle><span lang=UK>           for(String s:keyStrings) averageMap.put(s,
0.0);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           // Ініціалізація накопичувачів
інформації</span></p>

<p class=a0CxSpMiddle><span lang=UK>           for (int j = 0; j &lt;
nParallel; j++) modelArray[j].resetTransAccum();</span></p>

<p class=a0CxSpMiddle><span lang=UK>           // Затримка на довжину інтервалу</span></p>

<p class=a0CxSpMiddle><span lang=UK>           this.holdForTime(interval);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           // Усереднення накопичених даних</span></p>

<p class=a0CxSpMiddle><span lang=UK>           for (int j = 0; j &lt;
nParallel; j++){</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   resMap
=modelArray[j].getTransResult();</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   for(String
s:keyStrings){</span></p>

<p class=a0CxSpMiddle><span lang=UK>                          double result =
resMap.get(s);</span></p>

<p class=a0CxSpMiddle><span lang=UK>                          double sum =
averageMap.get(s);</span></p>

<p class=a0CxSpMiddle><span lang=UK>                          sum+=result;</span></p>

<p class=a0CxSpMiddle><span lang=UK>                          averageMap.put(s,sum);</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   }</span></p>

<p class=a0CxSpMiddle><span lang=UK>           }</span></p>

<p class=a0CxSpMiddle><span lang=UK>           for(String s:keyStrings){</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   double sum =
averageMap.get(s);</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   sum /=  nParallel;</span></p>

<p class=a0CxSpMiddle><span lang=UK>                   averageMap.put(s,sum);</span></p>

<p class=a0CxSpMiddle><span lang=UK>           }</span></p>

<p class=a0CxSpMiddle><span lang=UK>           // Запис та індикація результату
усереднення</span></p>

<p class=a0CxSpMiddle><span lang=UK>           intervalAverageArray[i] =
averageMap;</span></p>

<p class=a0CxSpMiddle><span lang=UK>           if (diagram != null)</span><span
lang=EN-US>{</span></p>

<p class=a0CxSpMiddle><span lang=UK>               diagram.getPainter().drawOvalAtXY((float)
(interval * (i + 0.5)),</span></p>

<p class=a0CxSpMiddle><span lang=UK>                            averageMap.get(keyStrings[0]).floatValue(),
3, 3);</span></p>

<p class=a0CxSpMiddle><span lang=UK>               diagram.getPainter().drawOvalAtXY((float)
(interval * (i + 0.5)),</span></p>

<p class=a0CxSpMiddle><span lang=UK>                          averageMap.get(keyStrings[0]).floatValue(),
2, 2);</span></p>

<p class=a0CxSpMiddle><span lang=UK>            }</span></p>

<p class=a0CxSpMiddle><span lang=EN-US>        }</span></p>

<p class=a0CxSpLast><span lang=UK>    }</span></p>

</div>

<p class=a1><span lang=UK style='color:black'>У методі </span><span lang=EN-US
style='color:black'>rule</span><span style='color:black'>()</span><span
lang=UK style='color:black'>за допомогою фабрики створюється масив моделей,
розмірність якого дорівнює кількості паралельно працюючих</span><span
lang=EN-US style='color:black'> моделей</span><span lang=UK style='color:black'>,
і кожна модель ініціалізується. </span></p>

<p class=a1><span lang=UK style='color:black'>Далі створюється масив колекцій
для результатів моніторингу</span><span lang=UK style='color:black'> </span><span
lang=EN-US style='color:black'>i</span><span lang=UK style='color:black'>ntervalAverageArray.</span></p>

<p class=a1><span lang=UK style='color:black'>Після цього монітор починає
головний цикл роботи. У цьому циклі монітор ініціалізує накопичувачі інформації
в моделях шляхом виклику методу resetAccum(), а потім зупиняється на проміжок
часу, який дорівнює довжині інтервалу накопичення інформації. </span></p>

<p class=a1><span lang=UK style='color:black'>Після зупинки монітора диспетчер
запускає всі моделі, і вони працюють, накопичуючи інформацію протягом інтервалу
накопичення. </span></p>

<p class=a1><span lang=UK style='color:black'>Після завершення інтервалу
накопичення відновляються правила дії монітора. Він одержує інформацію від
кожної з моделей, використовуючи метод get</span><span lang=EN-US
style='color:black'>Trans</span><span lang=UK style='color:black'>Result(), і
визначає середнє значення цих результатів для кожної черги. Отримані середні
значення монітор заносить у масив колекцій результатів моніторингу, а також
відображає на діаграмі </span><span style='color:black'>точку</span><span
lang=UK style='color:black'>, </span><span style='color:black'>яка</span><span
lang=UK style='color:black'> відповідає отриманому результату</span><span
lang=UK style='color:black'> </span><span lang=UK style='color:black'>для
однієї з черг.</span></p>

<p class=MsoNormal><span lang=UK>&nbsp;</span></p>

</div>

</body>

</html>
